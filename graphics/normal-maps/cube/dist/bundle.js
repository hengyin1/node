!function(g){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(g,n){!function(g,t){if(!X[g]||!m[g])return;for(var n in m[g]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(u[n]=t[n]);0==--F&&0===o&&U()}(g,n),t&&t(g,n)};var n,I=!0,B="6af8c67b280ea9862d84",e=1e4,c={},i=[],a=[];function Q(g){var t=V[g];if(!t)return p;var I=function(I){return t.hot.active?(V[I]?-1===V[I].parents.indexOf(g)&&V[I].parents.push(g):(i=[g],n=I),-1===t.children.indexOf(I)&&t.children.push(I)):(console.warn("[HMR] unexpected require("+I+") from disposed module "+g),i=[]),p(I)},B=function(g){return{configurable:!0,enumerable:!0,get:function(){return p[g]},set:function(t){p[g]=t}}};for(var e in p)Object.prototype.hasOwnProperty.call(p,e)&&"e"!==e&&"t"!==e&&Object.defineProperty(I,e,B(e));return I.e=function(g){return"ready"===G&&d("prepare"),o++,p.e(g).then(t,(function(g){throw t(),g}));function t(){o--,"prepare"===G&&(s[g]||Z(g),0===o&&0===F&&U())}},I.t=function(g,t){return 1&t&&(g=I(g)),p.t(g,-2&t)},I}function b(g){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==g,active:!0,accept:function(g,n){if(void 0===g)t._selfAccepted=!0;else if("function"==typeof g)t._selfAccepted=g;else if("object"==typeof g)for(var I=0;I<g.length;I++)t._acceptedDependencies[g[I]]=n||function(){};else t._acceptedDependencies[g]=n||function(){}},decline:function(g){if(void 0===g)t._selfDeclined=!0;else if("object"==typeof g)for(var n=0;n<g.length;n++)t._declinedDependencies[g[n]]=!0;else t._declinedDependencies[g]=!0},dispose:function(g){t._disposeHandlers.push(g)},addDisposeHandler:function(g){t._disposeHandlers.push(g)},removeDisposeHandler:function(g){var n=t._disposeHandlers.indexOf(g);n>=0&&t._disposeHandlers.splice(n,1)},check:r,apply:y,status:function(g){if(!g)return G;l.push(g)},addStatusHandler:function(g){l.push(g)},removeStatusHandler:function(g){var t=l.indexOf(g);t>=0&&l.splice(t,1)},data:c[g]};return n=void 0,t}var l=[],G="idle";function d(g){G=g;for(var t=0;t<l.length;t++)l[t].call(null,g)}var C,u,A,F=0,o=0,s={},m={},X={};function h(g){return+g+""===g?+g:g}function r(g){if("idle"!==G)throw new Error("check() is only allowed in idle status");return I=g,d("check"),(t=e,t=t||1e4,new Promise((function(g,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var I=new XMLHttpRequest,e=p.p+""+B+".hot-update.json";I.open("GET",e,!0),I.timeout=t,I.send(null)}catch(g){return n(g)}I.onreadystatechange=function(){if(4===I.readyState)if(0===I.status)n(new Error("Manifest request to "+e+" timed out."));else if(404===I.status)g();else if(200!==I.status&&304!==I.status)n(new Error("Manifest request to "+e+" failed."));else{try{var t=JSON.parse(I.responseText)}catch(g){return void n(g)}g(t)}}}))).then((function(g){if(!g)return d("idle"),null;m={},s={},X=g.c,A=g.h,d("prepare");var t=new Promise((function(g,t){C={resolve:g,reject:t}}));u={};return Z(0),"prepare"===G&&0===o&&0===F&&U(),t}));var t}function Z(g){X[g]?(m[g]=!0,F++,function(g){var t=document.createElement("script");t.charset="utf-8",t.src=p.p+""+g+"."+B+".hot-update.js",document.head.appendChild(t)}(g)):s[g]=!0}function U(){d("ready");var g=C;if(C=null,g)if(I)Promise.resolve().then((function(){return y(I)})).then((function(t){g.resolve(t)}),(function(t){g.reject(t)}));else{var t=[];for(var n in u)Object.prototype.hasOwnProperty.call(u,n)&&t.push(h(n));g.resolve(t)}}function y(t){if("ready"!==G)throw new Error("apply() is only allowed in ready status");var n,I,e,a,Q;function b(g){for(var t=[g],n={},I=t.map((function(g){return{chain:[g],id:g}}));I.length>0;){var B=I.pop(),e=B.id,c=B.chain;if((a=V[e])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:e};if(a.hot._main)return{type:"unaccepted",chain:c,moduleId:e};for(var i=0;i<a.parents.length;i++){var Q=a.parents[i],b=V[Q];if(b){if(b.hot._declinedDependencies[e])return{type:"declined",chain:c.concat([Q]),moduleId:e,parentId:Q};-1===t.indexOf(Q)&&(b.hot._acceptedDependencies[e]?(n[Q]||(n[Q]=[]),l(n[Q],[e])):(delete n[Q],t.push(Q),I.push({chain:c.concat([Q]),id:Q})))}}}}return{type:"accepted",moduleId:g,outdatedModules:t,outdatedDependencies:n}}function l(g,t){for(var n=0;n<t.length;n++){var I=t[n];-1===g.indexOf(I)&&g.push(I)}}t=t||{};var C={},F=[],o={},s=function(){console.warn("[HMR] unexpected require("+r.moduleId+") to disposed module")};for(var m in u)if(Object.prototype.hasOwnProperty.call(u,m)){var r;Q=h(m);var Z=!1,U=!1,y=!1,x="";switch((r=u[m]?b(Q):{type:"disposed",moduleId:m}).chain&&(x="\nUpdate propagation: "+r.chain.join(" -> ")),r.type){case"self-declined":t.onDeclined&&t.onDeclined(r),t.ignoreDeclined||(Z=new Error("Aborted because of self decline: "+r.moduleId+x));break;case"declined":t.onDeclined&&t.onDeclined(r),t.ignoreDeclined||(Z=new Error("Aborted because of declined dependency: "+r.moduleId+" in "+r.parentId+x));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(r),t.ignoreUnaccepted||(Z=new Error("Aborted because "+Q+" is not accepted"+x));break;case"accepted":t.onAccepted&&t.onAccepted(r),U=!0;break;case"disposed":t.onDisposed&&t.onDisposed(r),y=!0;break;default:throw new Error("Unexception type "+r.type)}if(Z)return d("abort"),Promise.reject(Z);if(U)for(Q in o[Q]=u[Q],l(F,r.outdatedModules),r.outdatedDependencies)Object.prototype.hasOwnProperty.call(r.outdatedDependencies,Q)&&(C[Q]||(C[Q]=[]),l(C[Q],r.outdatedDependencies[Q]));y&&(l(F,[r.moduleId]),o[Q]=s)}var N,W=[];for(I=0;I<F.length;I++)Q=F[I],V[Q]&&V[Q].hot._selfAccepted&&o[Q]!==s&&W.push({module:Q,errorHandler:V[Q].hot._selfAccepted});d("dispose"),Object.keys(X).forEach((function(g){!1===X[g]&&function(g){delete installedChunks[g]}(g)}));for(var T,Y,H=F.slice();H.length>0;)if(Q=H.pop(),a=V[Q]){var R={},D=a.hot._disposeHandlers;for(e=0;e<D.length;e++)(n=D[e])(R);for(c[Q]=R,a.hot.active=!1,delete V[Q],delete C[Q],e=0;e<a.children.length;e++){var E=V[a.children[e]];E&&((N=E.parents.indexOf(Q))>=0&&E.parents.splice(N,1))}}for(Q in C)if(Object.prototype.hasOwnProperty.call(C,Q)&&(a=V[Q]))for(Y=C[Q],e=0;e<Y.length;e++)T=Y[e],(N=a.children.indexOf(T))>=0&&a.children.splice(N,1);for(Q in d("apply"),B=A,o)Object.prototype.hasOwnProperty.call(o,Q)&&(g[Q]=o[Q]);var S=null;for(Q in C)if(Object.prototype.hasOwnProperty.call(C,Q)&&(a=V[Q])){Y=C[Q];var v=[];for(I=0;I<Y.length;I++)if(T=Y[I],n=a.hot._acceptedDependencies[T]){if(-1!==v.indexOf(n))continue;v.push(n)}for(I=0;I<v.length;I++){n=v[I];try{n(Y)}catch(g){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:Q,dependencyId:Y[I],error:g}),t.ignoreErrored||S||(S=g)}}}for(I=0;I<W.length;I++){var O=W[I];Q=O.module,i=[Q];try{p(Q)}catch(g){if("function"==typeof O.errorHandler)try{O.errorHandler(g)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:Q,error:n,originalError:g}),t.ignoreErrored||S||(S=n),S||(S=g)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:Q,error:g}),t.ignoreErrored||S||(S=g)}}return S?(d("fail"),Promise.reject(S)):(d("idle"),new Promise((function(g){g(F)})))}var V={};function p(t){if(V[t])return V[t].exports;var n=V[t]={i:t,l:!1,exports:{},hot:b(t),parents:(a=i,i=[],a),children:[]};return g[t].call(n.exports,n,n.exports,Q(t)),n.l=!0,n.exports}p.m=g,p.c=V,p.d=function(g,t,n){p.o(g,t)||Object.defineProperty(g,t,{enumerable:!0,get:n})},p.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},p.t=function(g,t){if(1&t&&(g=p(g)),8&t)return g;if(4&t&&"object"==typeof g&&g&&g.__esModule)return g;var n=Object.create(null);if(p.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:g}),2&t&&"string"!=typeof g)for(var I in g)p.d(n,I,function(t){return g[t]}.bind(null,I));return n},p.n=function(g){var t=g&&g.__esModule?function(){return g.default}:function(){return g};return p.d(t,"a",t),t},p.o=function(g,t){return Object.prototype.hasOwnProperty.call(g,t)},p.p="",p.h=function(){return B},Q("./graphics/normal-maps/cube/cube.js")(p.s="./graphics/normal-maps/cube/cube.js")}({"./graphics/normal-maps/cube/cube.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/Vec3Func.js\nconst EPSILON = 0.000001;\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction Vec3Func_length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nfunction Vec3Func_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\n\nfunction normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction cross(out, a, b) {\n  let ax = a[0],\n      ay = a[1],\n      az = a[2];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\n\nfunction lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat4(out, a, m) {\n  let x = a[0],\n      y = a[1],\n      z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat3(out, a, m) {\n  let x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  let x = a[0],\n      y = a[1],\n      z = a[2];\n  let qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  let w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nconst angle = function () {\n  const tempA = [0, 0, 0];\n  const tempB = [0, 0, 0];\n  return function (a, b) {\n    copy(tempA, a);\n    copy(tempB, b);\n    normalize(tempA, tempA);\n    normalize(tempB, tempB);\n    let cosine = dot(tempA, tempB);\n\n    if (cosine > 1.0) {\n      return 0;\n    } else if (cosine < -1.0) {\n      return Math.PI;\n    } else {\n      return Math.acos(cosine);\n    }\n  };\n}();\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Vec3.js\n\nclass Vec3_Vec3 extends Array {\n  constructor(x = 0, y = x, z = x) {\n    super(x, y, z);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set x(v) {\n    this[0] = v;\n  }\n\n  set y(v) {\n    this[1] = v;\n  }\n\n  set z(v) {\n    this[2] = v;\n  }\n\n  set(x, y = x, z = x) {\n    if (x.length) return this.copy(x);\n    set(this, x, y, z);\n    return this;\n  }\n\n  copy(v) {\n    copy(this, v);\n    return this;\n  }\n\n  add(va, vb) {\n    if (vb) add(this, va, vb);else add(this, this, va);\n    return this;\n  }\n\n  sub(va, vb) {\n    if (vb) subtract(this, va, vb);else subtract(this, this, va);\n    return this;\n  }\n\n  multiply(v) {\n    if (v.length) multiply(this, this, v);else Vec3Func_scale(this, this, v);\n    return this;\n  }\n\n  divide(v) {\n    if (v.length) divide(this, this, v);else Vec3Func_scale(this, this, 1 / v);\n    return this;\n  }\n\n  inverse(v = this) {\n    inverse(this, v);\n    return this;\n  } // Can't use 'length' as Array.prototype uses it\n\n\n  len() {\n    return Vec3Func_length(this);\n  }\n\n  distance(v) {\n    if (v) return distance(this, v);else return Vec3Func_length(this);\n  }\n\n  squaredLen() {\n    return squaredLength(this);\n  }\n\n  squaredDistance(v) {\n    if (v) return squaredDistance(this, v);else return squaredLength(this);\n  }\n\n  negate(v = this) {\n    negate(this, v);\n    return this;\n  }\n\n  cross(va, vb) {\n    if (vb) cross(this, va, vb);else cross(this, this, va);\n    return this;\n  }\n\n  scale(v) {\n    Vec3Func_scale(this, this, v);\n    return this;\n  }\n\n  normalize() {\n    normalize(this, this);\n    return this;\n  }\n\n  dot(v) {\n    return dot(this, v);\n  }\n\n  equals(v) {\n    return exactEquals(this, v);\n  }\n\n  applyMatrix4(mat4) {\n    transformMat4(this, this, mat4);\n    return this;\n  }\n\n  applyQuaternion(q) {\n    transformQuat(this, this, q);\n    return this;\n  }\n\n  angle(v) {\n    return angle(this, v);\n  }\n\n  lerp(v, t) {\n    lerp(this, this, v, t);\n    return this;\n  }\n\n  clone() {\n    return new Vec3_Vec3(this[0], this[1], this[2]);\n  }\n\n  fromArray(a, o = 0) {\n    this[0] = a[o];\n    this[1] = a[o + 1];\n    this[2] = a[o + 2];\n    return this;\n  }\n\n  toArray(a = [], o = 0) {\n    a[o] = this[0];\n    a[o + 1] = this[1];\n    a[o + 2] = this[2];\n    return a;\n  }\n\n  transformDirection(mat4) {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n    this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n    this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n    return this.normalize();\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/Geometry.js\n// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n//     buffer - gl buffer, if buffer exists, don't need to provide data\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n// TODO: fit in transform feedback\n// TODO: when would I disableVertexAttribArray ?\n// TODO: add fallback for non vao support (ie)\n// TODO: use offset/stride if exists\n// TODO: check size of position (eg triangle with Vec2)\n\nconst tempVec3 = new Vec3_Vec3();\nlet ID = 1;\nlet ATTR_ID = 1; // To stop inifinite warnings\n\nlet isBoundsWarned = false;\nclass Geometry_Geometry {\n  constructor(gl, attributes = {}) {\n    if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n    this.gl = gl;\n    this.attributes = attributes;\n    this.id = ID++; // Store one VAO per program attribute locations order\n\n    this.VAOs = {};\n    this.drawRange = {\n      start: 0,\n      count: 0\n    };\n    this.instancedCount = 0; // Unbind current VAO so that new buffers don't get added to active mesh\n\n    this.gl.renderer.bindVertexArray(null);\n    this.gl.renderer.currentGeometry = null; // Alias for state store to avoid redundant calls for global state\n\n    this.glState = this.gl.renderer.state; // create the buffers\n\n    for (let key in attributes) {\n      this.addAttribute(key, attributes[key]);\n    }\n  }\n\n  addAttribute(key, attr) {\n    this.attributes[key] = attr; // Set options\n\n    attr.id = ATTR_ID++; // TODO: currently unused, remove?\n\n    attr.size = attr.size || 1;\n    attr.type = attr.type || (attr.data.constructor === Float32Array ? this.gl.FLOAT : attr.data.constructor === Uint16Array ? this.gl.UNSIGNED_SHORT : this.gl.UNSIGNED_INT); // Uint32Array\n\n    attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n    attr.normalized = attr.normalized || false;\n    attr.stride = attr.stride || 0;\n    attr.offset = attr.offset || 0;\n    attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n    attr.divisor = attr.instanced || 0;\n    attr.needsUpdate = false;\n\n    if (!attr.buffer) {\n      attr.buffer = this.gl.createBuffer(); // Push data to buffer\n\n      this.updateAttribute(attr);\n    } // Update geometry counts. If indexed, ignore regular attributes\n\n\n    if (attr.divisor) {\n      this.isInstanced = true;\n\n      if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n        console.warn('geometry has multiple instanced buffers of different length');\n        return this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor);\n      }\n\n      this.instancedCount = attr.count * attr.divisor;\n    } else if (key === 'index') {\n      this.drawRange.count = attr.count;\n    } else if (!this.attributes.index) {\n      this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n    }\n  }\n\n  updateAttribute(attr) {\n    if (this.glState.boundBuffer !== attr.buffer) {\n      this.gl.bindBuffer(attr.target, attr.buffer);\n      this.glState.boundBuffer = attr.buffer;\n    }\n\n    this.gl.bufferData(attr.target, attr.data, this.gl.STATIC_DRAW);\n    attr.needsUpdate = false;\n  }\n\n  setIndex(value) {\n    this.addAttribute('index', value);\n  }\n\n  setDrawRange(start, count) {\n    this.drawRange.start = start;\n    this.drawRange.count = count;\n  }\n\n  setInstancedCount(value) {\n    this.instancedCount = value;\n  }\n\n  createVAO(program) {\n    this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n    this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n    this.bindAttributes(program);\n  }\n\n  bindAttributes(program) {\n    // Link all attributes to program using gl.vertexAttribPointer\n    program.attributeLocations.forEach((location, name) => {\n      // If geometry missing a required shader attribute\n      if (!this.attributes[name]) {\n        console.warn(`active attribute ${name} not being supplied`);\n        return;\n      }\n\n      const attr = this.attributes[name];\n      this.gl.bindBuffer(attr.target, attr.buffer);\n      this.glState.boundBuffer = attr.buffer;\n      this.gl.vertexAttribPointer(location, attr.size, attr.type, attr.normalized, attr.stride, attr.offset);\n      this.gl.enableVertexAttribArray(location); // For instanced attributes, divisor needs to be set.\n      // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n\n      this.gl.renderer.vertexAttribDivisor(location, attr.divisor);\n    }); // Bind indices if geometry indexed\n\n    if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n  }\n\n  draw({\n    program,\n    mode = this.gl.TRIANGLES\n  }) {\n    if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n      if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n      this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n      this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n    } // Check if any attributes need updating\n\n\n    program.attributeLocations.forEach((location, name) => {\n      const attr = this.attributes[name];\n      if (attr.needsUpdate) this.updateAttribute(attr);\n    });\n\n    if (this.isInstanced) {\n      if (this.attributes.index) {\n        this.gl.renderer.drawElementsInstanced(mode, this.drawRange.count, this.attributes.index.type, this.drawRange.start, this.instancedCount);\n      } else {\n        this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n      }\n    } else {\n      if (this.attributes.index) {\n        this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\n      } else {\n        this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n      }\n    }\n  }\n\n  getPositionArray() {\n    // Use position buffer, or min/max if available\n    const attr = this.attributes.position;\n    if (attr.min) return [...attr.min, ...attr.max];\n    if (attr.data) return attr.data;\n    if (isBoundsWarned) return;\n    console.warn('No position buffer data found to compute bounds');\n    return isBoundsWarned = true;\n  }\n\n  computeBoundingBox(array) {\n    if (!array) array = this.getPositionArray();\n\n    if (!this.bounds) {\n      this.bounds = {\n        min: new Vec3_Vec3(),\n        max: new Vec3_Vec3(),\n        center: new Vec3_Vec3(),\n        scale: new Vec3_Vec3(),\n        radius: Infinity\n      };\n    }\n\n    const min = this.bounds.min;\n    const max = this.bounds.max;\n    const center = this.bounds.center;\n    const scale = this.bounds.scale;\n    min.set(+Infinity);\n    max.set(-Infinity); // TODO: use offset/stride if exists\n    // TODO: check size of position (eg triangle with Vec2)\n\n    for (let i = 0, l = array.length; i < l; i += 3) {\n      const x = array[i];\n      const y = array[i + 1];\n      const z = array[i + 2];\n      min.x = Math.min(x, min.x);\n      min.y = Math.min(y, min.y);\n      min.z = Math.min(z, min.z);\n      max.x = Math.max(x, max.x);\n      max.y = Math.max(y, max.y);\n      max.z = Math.max(z, max.z);\n    }\n\n    scale.sub(max, min);\n    center.add(min, max).divide(2);\n  }\n\n  computeBoundingSphere(array) {\n    if (!array) array = this.getPositionArray();\n    if (!this.bounds) this.computeBoundingBox(array);\n    let maxRadiusSq = 0;\n\n    for (let i = 0, l = array.length; i < l; i += 3) {\n      tempVec3.fromArray(array, i);\n      maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n    }\n\n    this.bounds.radius = Math.sqrt(maxRadiusSq);\n  }\n\n  remove() {\n    if (this.vao) this.gl.renderer.deleteVertexArray(this.vao);\n\n    for (let key in this.attributes) {\n      this.gl.deleteBuffer(this.attributes[key].buffer);\n      delete this.attributes[key];\n    }\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/Program.js\n// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\nlet Program_ID = 1; // cache of typed arrays used to flatten uniform arrays\n\nconst arrayCacheF32 = {};\nclass Program {\n  constructor(gl, {\n    vertex,\n    fragment,\n    uniforms = {},\n    transparent = false,\n    cullFace = gl.BACK,\n    frontFace = gl.CCW,\n    depthTest = true,\n    depthWrite = true,\n    depthFunc = gl.LESS\n  } = {}) {\n    if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n    this.gl = gl;\n    this.uniforms = uniforms;\n    this.id = Program_ID++;\n    if (!vertex) console.warn('vertex shader not supplied');\n    if (!fragment) console.warn('fragment shader not supplied'); // Store program state\n\n    this.transparent = transparent;\n    this.cullFace = cullFace;\n    this.frontFace = frontFace;\n    this.depthTest = depthTest;\n    this.depthWrite = depthWrite;\n    this.depthFunc = depthFunc;\n    this.blendFunc = {};\n    this.blendEquation = {}; // set default blendFunc if transparent flagged\n\n    if (this.transparent && !this.blendFunc.src) {\n      if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n    } // compile vertex shader and log errors\n\n\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertex);\n    gl.compileShader(vertexShader);\n\n    if (gl.getShaderInfoLog(vertexShader) !== '') {\n      console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n    } // compile fragment shader and log errors\n\n\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragment);\n    gl.compileShader(fragmentShader);\n\n    if (gl.getShaderInfoLog(fragmentShader) !== '') {\n      console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n    } // compile program and log errors\n\n\n    this.program = gl.createProgram();\n    gl.attachShader(this.program, vertexShader);\n    gl.attachShader(this.program, fragmentShader);\n    gl.linkProgram(this.program);\n\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      return console.warn(gl.getProgramInfoLog(this.program));\n    } // Remove shader once linked\n\n\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader); // Get active uniform locations\n\n    this.uniformLocations = new Map();\n    let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n\n    for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n      let uniform = gl.getActiveUniform(this.program, uIndex);\n      this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name)); // split uniforms' names to separate array and struct declarations\n\n      const split = uniform.name.match(/(\\w+)/g);\n      uniform.uniformName = split[0];\n\n      if (split.length === 3) {\n        uniform.isStructArray = true;\n        uniform.structIndex = Number(split[1]);\n        uniform.structProperty = split[2];\n      } else if (split.length === 2 && isNaN(Number(split[1]))) {\n        uniform.isStruct = true;\n        uniform.structProperty = split[1];\n      }\n    } // Get active attribute locations\n\n\n    this.attributeLocations = new Map();\n    const locations = [];\n    const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n      const attribute = gl.getActiveAttrib(this.program, aIndex);\n      const location = gl.getAttribLocation(this.program, attribute.name);\n      locations[location] = attribute.name;\n      this.attributeLocations.set(attribute.name, location);\n    }\n\n    this.attributeOrder = locations.join('');\n  }\n\n  setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n    this.blendFunc.src = src;\n    this.blendFunc.dst = dst;\n    this.blendFunc.srcAlpha = srcAlpha;\n    this.blendFunc.dstAlpha = dstAlpha;\n    if (src) this.transparent = true;\n  }\n\n  setBlendEquation(modeRGB, modeAlpha) {\n    this.blendEquation.modeRGB = modeRGB;\n    this.blendEquation.modeAlpha = modeAlpha;\n  }\n\n  applyState() {\n    if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n    if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);else this.gl.renderer.disable(this.gl.CULL_FACE);\n    if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);else this.gl.renderer.disable(this.gl.BLEND);\n    if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n    this.gl.renderer.setFrontFace(this.frontFace);\n    this.gl.renderer.setDepthMask(this.depthWrite);\n    this.gl.renderer.setDepthFunc(this.depthFunc);\n    if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n    if (this.blendEquation.modeRGB) this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n  }\n\n  use({\n    flipFaces = false\n  } = {}) {\n    let textureUnit = -1;\n    const programActive = this.gl.renderer.currentProgram === this.id; // Avoid gl call if program already in use\n\n    if (!programActive) {\n      this.gl.useProgram(this.program);\n      this.gl.renderer.currentProgram = this.id;\n    } // Set only the active uniforms found in the shader\n\n\n    this.uniformLocations.forEach((location, activeUniform) => {\n      let name = activeUniform.uniformName; // get supplied uniform\n\n      let uniform = this.uniforms[name]; // For structs, get the specific property instead of the entire object\n\n      if (activeUniform.isStruct) {\n        uniform = uniform[activeUniform.structProperty];\n        name += `.${activeUniform.structProperty}`;\n      }\n\n      if (activeUniform.isStructArray) {\n        uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n        name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n      }\n\n      if (!uniform) {\n        return warn(`Active uniform ${name} has not been supplied`);\n      }\n\n      if (uniform && uniform.value === undefined) {\n        return warn(`${name} uniform is missing a value parameter`);\n      }\n\n      if (uniform.value.texture) {\n        textureUnit = textureUnit + 1; // Check if texture needs to be updated\n\n        uniform.value.update(textureUnit);\n        return setUniform(this.gl, activeUniform.type, location, textureUnit);\n      } // For texture arrays, set uniform as an array of texture units instead of just one\n\n\n      if (uniform.value.length && uniform.value[0].texture) {\n        const textureUnits = [];\n        uniform.value.forEach(value => {\n          textureUnit = textureUnit + 1;\n          value.update(textureUnit);\n          textureUnits.push(textureUnit);\n        });\n        return setUniform(this.gl, activeUniform.type, location, textureUnits);\n      }\n\n      setUniform(this.gl, activeUniform.type, location, uniform.value);\n    });\n    this.applyState();\n    if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n  }\n\n  remove() {\n    this.gl.deleteProgram(this.program);\n  }\n\n}\n\nfunction setUniform(gl, type, location, value) {\n  value = value.length ? flatten(value) : value;\n  const setValue = gl.renderer.state.uniformLocations.get(location); // Avoid redundant uniform commands\n\n  if (value.length) {\n    if (setValue === undefined) {\n      // clone array to store as cache\n      gl.renderer.state.uniformLocations.set(location, value.slice(0));\n    } else {\n      if (arraysEqual(setValue, value)) return; // Update cached array values\n\n      setValue.set ? setValue.set(value) : setArray(setValue, value);\n      gl.renderer.state.uniformLocations.set(location, setValue);\n    }\n  } else {\n    if (setValue === value) return;\n    gl.renderer.state.uniformLocations.set(location, value);\n  }\n\n  switch (type) {\n    case 5126:\n      return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value);\n    // FLOAT\n\n    case 35664:\n      return gl.uniform2fv(location, value);\n    // FLOAT_VEC2\n\n    case 35665:\n      return gl.uniform3fv(location, value);\n    // FLOAT_VEC3\n\n    case 35666:\n      return gl.uniform4fv(location, value);\n    // FLOAT_VEC4\n\n    case 35670: // BOOL\n\n    case 5124: // INT\n\n    case 35678: // SAMPLER_2D\n\n    case 35680:\n      return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value);\n    // SAMPLER_CUBE\n\n    case 35671: // BOOL_VEC2\n\n    case 35667:\n      return gl.uniform2iv(location, value);\n    // INT_VEC2\n\n    case 35672: // BOOL_VEC3\n\n    case 35668:\n      return gl.uniform3iv(location, value);\n    // INT_VEC3\n\n    case 35673: // BOOL_VEC4\n\n    case 35669:\n      return gl.uniform4iv(location, value);\n    // INT_VEC4\n\n    case 35674:\n      return gl.uniformMatrix2fv(location, false, value);\n    // FLOAT_MAT2\n\n    case 35675:\n      return gl.uniformMatrix3fv(location, false, value);\n    // FLOAT_MAT3\n\n    case 35676:\n      return gl.uniformMatrix4fv(location, false, value);\n    // FLOAT_MAT4\n  }\n}\n\nfunction addLineNumbers(string) {\n  let lines = string.split('\\n');\n\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n\n  return lines.join('\\n');\n}\n\nfunction flatten(a) {\n  const arrayLen = a.length;\n  const valueLen = a[0].length;\n  if (valueLen === undefined) return a;\n  const length = arrayLen * valueLen;\n  let value = arrayCacheF32[length];\n  if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n\n  for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n\n  return value;\n}\n\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0, l = a.length; i < l; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n}\n\nfunction setArray(a, b) {\n  for (let i = 0, l = a.length; i < l; i++) {\n    a[i] = b[i];\n  }\n}\n\nlet warnCount = 0;\n\nfunction warn(message) {\n  if (warnCount > 100) return;\n  console.warn(message);\n  warnCount++;\n  if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/Renderer.js\n // TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst Renderer_tempVec3 = new Vec3_Vec3();\nlet Renderer_ID = 1;\nclass Renderer {\n  constructor({\n    canvas = document.createElement('canvas'),\n    width = 300,\n    height = 150,\n    dpr = 1,\n    alpha = false,\n    depth = true,\n    stencil = false,\n    antialias = false,\n    premultipliedAlpha = false,\n    preserveDrawingBuffer = false,\n    powerPreference = 'default',\n    autoClear = true,\n    webgl = 2\n  } = {}) {\n    const attributes = {\n      alpha,\n      depth,\n      stencil,\n      antialias,\n      premultipliedAlpha,\n      preserveDrawingBuffer,\n      powerPreference\n    };\n    this.dpr = dpr;\n    this.alpha = alpha;\n    this.color = true;\n    this.depth = depth;\n    this.stencil = stencil;\n    this.premultipliedAlpha = premultipliedAlpha;\n    this.autoClear = autoClear;\n    this.id = Renderer_ID++; // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n\n    if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n    this.isWebgl2 = !!this.gl;\n\n    if (!this.gl) {\n      this.gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\n    } // Attach renderer to gl so that all classes have access to internal state functions\n\n\n    this.gl.renderer = this; // initialise size values\n\n    this.setSize(width, height); // gl state stores to avoid redundant calls on methods used internally\n\n    this.state = {};\n    this.state.blendFunc = {\n      src: this.gl.ONE,\n      dst: this.gl.ZERO\n    };\n    this.state.blendEquation = {\n      modeRGB: this.gl.FUNC_ADD\n    };\n    this.state.cullFace = null;\n    this.state.frontFace = this.gl.CCW;\n    this.state.depthMask = true;\n    this.state.depthFunc = this.gl.LESS;\n    this.state.premultiplyAlpha = false;\n    this.state.flipY = false;\n    this.state.unpackAlignment = 4;\n    this.state.framebuffer = null;\n    this.state.viewport = {\n      width: null,\n      height: null\n    };\n    this.state.textureUnits = [];\n    this.state.activeTextureUnit = 0;\n    this.state.boundBuffer = null;\n    this.state.uniformLocations = new Map(); // store requested extensions\n\n    this.extensions = {}; // Initialise extra format types\n\n    if (this.isWebgl2) {\n      this.getExtension('EXT_color_buffer_float');\n      this.getExtension('OES_texture_float_linear');\n    } else {\n      this.getExtension('OES_texture_float');\n      this.getExtension('OES_texture_float_linear');\n      this.getExtension('OES_texture_half_float');\n      this.getExtension('OES_texture_half_float_linear');\n      this.getExtension('OES_element_index_uint');\n      this.getExtension('OES_standard_derivatives');\n      this.getExtension('EXT_sRGB');\n      this.getExtension('WEBGL_depth_texture');\n      this.getExtension('WEBGL_draw_buffers');\n    } // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n\n\n    this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n    this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n    this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n    this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n    this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n    this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n    this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL'); // Store device parameters\n\n    this.parameters = {};\n    this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic') ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.gl.canvas.width = width * this.dpr;\n    this.gl.canvas.height = height * this.dpr;\n    Object.assign(this.gl.canvas.style, {\n      width: width + 'px',\n      height: height + 'px'\n    });\n  }\n\n  setViewport(width, height) {\n    if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n    this.state.viewport.width = width;\n    this.state.viewport.height = height;\n    this.gl.viewport(0, 0, width, height);\n  }\n\n  enable(id) {\n    if (this.state[id] === true) return;\n    this.gl.enable(id);\n    this.state[id] = true;\n  }\n\n  disable(id) {\n    if (this.state[id] === false) return;\n    this.gl.disable(id);\n    this.state[id] = false;\n  }\n\n  setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n    if (this.state.blendFunc.src === src && this.state.blendFunc.dst === dst && this.state.blendFunc.srcAlpha === srcAlpha && this.state.blendFunc.dstAlpha === dstAlpha) return;\n    this.state.blendFunc.src = src;\n    this.state.blendFunc.dst = dst;\n    this.state.blendFunc.srcAlpha = srcAlpha;\n    this.state.blendFunc.dstAlpha = dstAlpha;\n    if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);else this.gl.blendFunc(src, dst);\n  }\n\n  setBlendEquation(modeRGB, modeAlpha) {\n    if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n    this.state.blendEquation.modeRGB = modeRGB;\n    this.state.blendEquation.modeAlpha = modeAlpha;\n    if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);else this.gl.blendEquation(modeRGB);\n  }\n\n  setCullFace(value) {\n    if (this.state.cullFace === value) return;\n    this.state.cullFace = value;\n    this.gl.cullFace(value);\n  }\n\n  setFrontFace(value) {\n    if (this.state.frontFace === value) return;\n    this.state.frontFace = value;\n    this.gl.frontFace(value);\n  }\n\n  setDepthMask(value) {\n    if (this.state.depthMask === value) return;\n    this.state.depthMask = value;\n    this.gl.depthMask(value);\n  }\n\n  setDepthFunc(value) {\n    if (this.state.depthFunc === value) return;\n    this.state.depthFunc = value;\n    this.gl.depthFunc(value);\n  }\n\n  activeTexture(value) {\n    if (this.state.activeTextureUnit === value) return;\n    this.state.activeTextureUnit = value;\n    this.gl.activeTexture(this.gl.TEXTURE0 + value);\n  }\n\n  bindFramebuffer({\n    target = this.gl.FRAMEBUFFER,\n    buffer = null\n  } = {}) {\n    if (this.state.framebuffer === buffer) return;\n    this.state.framebuffer = buffer;\n    this.gl.bindFramebuffer(target, buffer);\n  }\n\n  getExtension(extension, webgl2Func, extFunc) {\n    // if webgl2 function supported, return func bound to gl context\n    if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl); // fetch extension once only\n\n    if (!this.extensions[extension]) {\n      this.extensions[extension] = this.gl.getExtension(extension);\n    } // return extension if no function requested\n\n\n    if (!webgl2Func) return this.extensions[extension]; // Return null if extension not supported\n\n    if (!this.extensions[extension]) return null; // return extension function, bound to extension\n\n    return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n  }\n\n  sortOpaque(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.program.id !== b.program.id) {\n      return a.program.id - b.program.id;\n    } else if (a.zDepth !== b.zDepth) {\n      return a.zDepth - b.zDepth;\n    } else {\n      return b.id - a.id;\n    }\n  }\n\n  sortTransparent(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    }\n\n    if (a.zDepth !== b.zDepth) {\n      return b.zDepth - a.zDepth;\n    } else {\n      return b.id - a.id;\n    }\n  }\n\n  sortUI(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.program.id !== b.program.id) {\n      return a.program.id - b.program.id;\n    } else {\n      return b.id - a.id;\n    }\n  }\n\n  getRenderList({\n    scene,\n    camera,\n    frustumCull,\n    sort\n  }) {\n    let renderList = [];\n    if (camera && frustumCull) camera.updateFrustum(); // Get visible\n\n    scene.traverse(node => {\n      if (!node.visible) return true;\n      if (!node.draw) return;\n\n      if (frustumCull && node.frustumCulled && camera) {\n        if (!camera.frustumIntersectsMesh(node)) return;\n      }\n\n      renderList.push(node);\n    });\n\n    if (sort) {\n      const opaque = [];\n      const transparent = []; // depthTest true\n\n      const ui = []; // depthTest false\n\n      renderList.forEach(node => {\n        // Split into the 3 render groups\n        if (!node.program.transparent) {\n          opaque.push(node);\n        } else if (node.program.depthTest) {\n          transparent.push(node);\n        } else {\n          ui.push(node);\n        }\n\n        node.zDepth = 0; // Only calculate z-depth if renderOrder unset and depthTest is true\n\n        if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return; // update z-depth\n\n        node.worldMatrix.getTranslation(Renderer_tempVec3);\n        Renderer_tempVec3.applyMatrix4(camera.projectionViewMatrix);\n        node.zDepth = Renderer_tempVec3.z;\n      });\n      opaque.sort(this.sortOpaque);\n      transparent.sort(this.sortTransparent);\n      ui.sort(this.sortUI);\n      renderList = opaque.concat(transparent, ui);\n    }\n\n    return renderList;\n  }\n\n  render({\n    scene,\n    camera,\n    target = null,\n    update = true,\n    sort = true,\n    frustumCull = true,\n    clear\n  }) {\n    if (target === null) {\n      // make sure no render target bound so draws to canvas\n      this.bindFramebuffer();\n      this.setViewport(this.width * this.dpr, this.height * this.dpr);\n    } else {\n      // bind supplied render target and update viewport\n      this.bindFramebuffer(target);\n      this.setViewport(target.width, target.height);\n    }\n\n    if (clear || this.autoClear && clear !== false) {\n      // Ensure depth buffer writing is enabled so it can be cleared\n      if (this.depth && (!target || target.depth)) {\n        this.enable(this.gl.DEPTH_TEST);\n        this.setDepthMask(true);\n      }\n\n      this.gl.clear((this.color ? this.gl.COLOR_BUFFER_BIT : 0) | (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) | (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0));\n    } // updates all scene graph matrices\n\n\n    if (update) scene.updateMatrixWorld(); // Update camera separately, in case not in scene graph\n\n    if (camera) camera.updateMatrixWorld(); // Get render list - entails culling and sorting\n\n    const renderList = this.getRenderList({\n      scene,\n      camera,\n      frustumCull,\n      sort\n    });\n    renderList.forEach(node => {\n      node.draw({\n        camera\n      });\n    });\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/Vec4Func.js\nconst Vec4Func_EPSILON = 0.000001;\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\n\nfunction Vec4Func_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nfunction Vec4Func_set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\n\nfunction Vec4Func_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nfunction Vec4Func_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction Vec4Func_length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\n\nfunction Vec4Func_normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction Vec4Func_dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\n\nfunction Vec4Func_lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/QuatFunc.js\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\n\nfunction QuatFunc_multiply(out, a, b) {\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nfunction rotateX(out, a, rad) {\n  rad *= 0.5;\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nfunction rotateY(out, a, rad) {\n  rad *= 0.5;\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nfunction rotateZ(out, a, rad) {\n  rad *= 0.5;\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  let omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nfunction invert(out, a) {\n  let a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  let invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    let j = (i + 1) % 3;\n    let k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\n\nfunction fromEuler(out, euler, order = 'YXZ') {\n  let sx = Math.sin(euler[0] * 0.5);\n  let cx = Math.cos(euler[0] * 0.5);\n  let sy = Math.sin(euler[1] * 0.5);\n  let cy = Math.cos(euler[1] * 0.5);\n  let sz = Math.sin(euler[2] * 0.5);\n  let cz = Math.cos(euler[2] * 0.5);\n\n  if (order === 'XYZ') {\n    out[0] = sx * cy * cz + cx * sy * sz;\n    out[1] = cx * sy * cz - sx * cy * sz;\n    out[2] = cx * cy * sz + sx * sy * cz;\n    out[3] = cx * cy * cz - sx * sy * sz;\n  } else if (order === 'YXZ') {\n    out[0] = sx * cy * cz + cx * sy * sz;\n    out[1] = cx * sy * cz - sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n  } else if (order === 'ZXY') {\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz + sx * sy * cz;\n    out[3] = cx * cy * cz - sx * sy * sz;\n  } else if (order === 'ZYX') {\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n  } else if (order === 'YZX') {\n    out[0] = sx * cy * cz + cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz - sx * sy * sz;\n  } else if (order === 'XZY') {\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz - sx * cy * sz;\n    out[2] = cx * cy * sz + sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n  }\n\n  return out;\n}\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nconst QuatFunc_copy = Vec4Func_copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nconst QuatFunc_set = Vec4Func_set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nconst QuatFunc_add = Vec4Func_add;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nconst QuatFunc_scale = Vec4Func_scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nconst QuatFunc_dot = Vec4Func_dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\n\nconst QuatFunc_lerp = Vec4Func_lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nconst QuatFunc_length = Vec4Func_length;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nconst QuatFunc_normalize = Vec4Func_normalize;\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Quat.js\n\nclass Quat_Quat extends Array {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    super(x, y, z, w);\n\n    this.onChange = () => {};\n\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set x(v) {\n    this[0] = v;\n    this.onChange();\n  }\n\n  set y(v) {\n    this[1] = v;\n    this.onChange();\n  }\n\n  set z(v) {\n    this[2] = v;\n    this.onChange();\n  }\n\n  set w(v) {\n    this[3] = v;\n    this.onChange();\n  }\n\n  identity() {\n    identity(this);\n    this.onChange();\n    return this;\n  }\n\n  set(x, y, z, w) {\n    if (x.length) return this.copy(x);\n    QuatFunc_set(this, x, y, z, w);\n    this.onChange();\n    return this;\n  }\n\n  rotateX(a) {\n    rotateX(this, this, a);\n    this.onChange();\n    return this;\n  }\n\n  rotateY(a) {\n    rotateY(this, this, a);\n    this.onChange();\n    return this;\n  }\n\n  rotateZ(a) {\n    rotateZ(this, this, a);\n    this.onChange();\n    return this;\n  }\n\n  inverse(q = this) {\n    invert(this, q);\n    this.onChange();\n    return this;\n  }\n\n  conjugate(q = this) {\n    conjugate(this, q);\n    this.onChange();\n    return this;\n  }\n\n  copy(q) {\n    QuatFunc_copy(this, q);\n    this.onChange();\n    return this;\n  }\n\n  normalize(q = this) {\n    QuatFunc_normalize(this, q);\n    this.onChange();\n    return this;\n  }\n\n  multiply(qA, qB) {\n    if (qB) {\n      QuatFunc_multiply(this, qA, qB);\n    } else {\n      QuatFunc_multiply(this, this, qA);\n    }\n\n    this.onChange();\n    return this;\n  }\n\n  dot(v) {\n    return QuatFunc_dot(this, v);\n  }\n\n  fromMatrix3(matrix3) {\n    fromMat3(this, matrix3);\n    this.onChange();\n    return this;\n  }\n\n  fromEuler(euler) {\n    fromEuler(this, euler, euler.order);\n    return this;\n  }\n\n  fromAxisAngle(axis, a) {\n    setAxisAngle(this, axis, a);\n    return this;\n  }\n\n  slerp(q, t) {\n    slerp(this, this, q, t);\n    return this;\n  }\n\n  fromArray(a, o = 0) {\n    this[0] = a[o];\n    this[1] = a[o + 1];\n    this[2] = a[o + 2];\n    this[3] = a[o + 3];\n    return this;\n  }\n\n  toArray(a = [], o = 0) {\n    a[o] = this[0];\n    a[o + 1] = this[1];\n    a[o + 2] = this[2];\n    a[o + 3] = this[3];\n    return a;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/Mat4Func.js\nconst Mat4Func_EPSILON = 0.000001;\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction Mat4Func_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nfunction Mat4Func_set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nfunction Mat4Func_identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a12 = a[6],\n        a13 = a[7];\n    let a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction Mat4Func_invert(out, a) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  let a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  let a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  let a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nfunction determinant(a) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  let a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  let a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  let a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction Mat4Func_multiply(out, a, b) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  let a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  let a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  let a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  let b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\n\nfunction translate(out, a, v) {\n  let x = v[0],\n      y = v[1],\n      z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nfunction Mat4Func_scale(out, a, v) {\n  let x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction rotate(out, a, rad, axis) {\n  let x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  let len = Math.hypot(x, y, z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (Math.abs(len) < Mat4Func_EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\nfunction getMaxScaleOnAxis(mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n  const x = m11 * m11 + m12 * m12 + m13 * m13;\n  const y = m21 * m21 + m22 * m22 + m23 * m23;\n  const z = m31 * m31 + m32 * m32 + m33 * m33;\n  return Math.sqrt(Math.max(x, y, z));\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nconst getRotation = function () {\n  const temp = [0, 0, 0];\n  return function (out, mat) {\n    let scaling = temp;\n    getScaling(scaling, mat);\n    let is1 = 1 / scaling[0];\n    let is2 = 1 / scaling[1];\n    let is3 = 1 / scaling[2];\n    let sm11 = mat[0] * is1;\n    let sm12 = mat[1] * is2;\n    let sm13 = mat[2] * is3;\n    let sm21 = mat[4] * is1;\n    let sm22 = mat[5] * is2;\n    let sm23 = mat[6] * is3;\n    let sm31 = mat[8] * is1;\n    let sm32 = mat[9] * is2;\n    let sm33 = mat[10] * is3;\n    let trace = sm11 + sm22 + sm33;\n    let S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out[3] = 0.25 * S;\n      out[0] = (sm23 - sm32) / S;\n      out[1] = (sm31 - sm13) / S;\n      out[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n      out[3] = (sm23 - sm32) / S;\n      out[0] = 0.25 * S;\n      out[1] = (sm12 + sm21) / S;\n      out[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n      out[3] = (sm31 - sm13) / S;\n      out[0] = (sm12 + sm21) / S;\n      out[1] = 0.25 * S;\n      out[2] = (sm23 + sm32) / S;\n    } else {\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n      out[3] = (sm12 - sm21) / S;\n      out[0] = (sm31 + sm13) / S;\n      out[1] = (sm23 + sm32) / S;\n      out[2] = 0.25 * S;\n    }\n\n    return out;\n  };\n}();\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nfunction fromQuat(out, q) {\n  let x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 2 * far * near * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len === 0) {\n    // eye and target are in the same position\n    z2 = 1;\n  } else {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len === 0) {\n    // up and z are parallel\n    if (upz) {\n      upx += 1e-6;\n    } else if (upy) {\n      upz += 1e-6;\n    } else {\n      upy += 1e-6;\n    }\n\n    x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n  }\n\n  len = 1 / Math.sqrt(len);\n  x0 *= len;\n  x1 *= len;\n  x2 *= len;\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction Mat4Func_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction Mat4Func_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Mat4.js\n\nclass Mat4_Mat4 extends Array {\n  constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {\n    super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n    return this;\n  }\n\n  get x() {\n    return this[12];\n  }\n\n  get y() {\n    return this[13];\n  }\n\n  get z() {\n    return this[14];\n  }\n\n  get w() {\n    return this[15];\n  }\n\n  set x(v) {\n    this[12] = v;\n  }\n\n  set y(v) {\n    this[13] = v;\n  }\n\n  set z(v) {\n    this[14] = v;\n  }\n\n  set w(v) {\n    this[15] = v;\n  }\n\n  set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    if (m00.length) return this.copy(m00);\n    Mat4Func_set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n    return this;\n  }\n\n  translate(v, m = this) {\n    translate(this, m, v);\n    return this;\n  }\n\n  rotate(v, axis, m = this) {\n    rotate(this, m, v, axis);\n    return this;\n  }\n\n  scale(v, m = this) {\n    Mat4Func_scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n    return this;\n  }\n\n  multiply(ma, mb) {\n    if (mb) {\n      Mat4Func_multiply(this, ma, mb);\n    } else {\n      Mat4Func_multiply(this, this, ma);\n    }\n\n    return this;\n  }\n\n  identity() {\n    Mat4Func_identity(this);\n    return this;\n  }\n\n  copy(m) {\n    Mat4Func_copy(this, m);\n    return this;\n  }\n\n  fromPerspective({\n    fov,\n    aspect,\n    near,\n    far\n  } = {}) {\n    perspective(this, fov, aspect, near, far);\n    return this;\n  }\n\n  fromOrthogonal({\n    left,\n    right,\n    bottom,\n    top,\n    near,\n    far\n  }) {\n    ortho(this, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  fromQuaternion(q) {\n    fromQuat(this, q);\n    return this;\n  }\n\n  setPosition(v) {\n    this.x = v[0];\n    this.y = v[1];\n    this.z = v[2];\n    return this;\n  }\n\n  inverse(m = this) {\n    Mat4Func_invert(this, m);\n    return this;\n  }\n\n  compose(q, pos, scale) {\n    fromRotationTranslationScale(this, q, pos, scale);\n    return this;\n  }\n\n  getRotation(q) {\n    getRotation(q, this);\n    return this;\n  }\n\n  getTranslation(pos) {\n    getTranslation(pos, this);\n    return this;\n  }\n\n  getScaling(scale) {\n    getScaling(scale, this);\n    return this;\n  }\n\n  getMaxScaleOnAxis() {\n    return getMaxScaleOnAxis(this);\n  }\n\n  lookAt(eye, target, up) {\n    targetTo(this, eye, target, up);\n    return this;\n  }\n\n  determinant() {\n    return determinant(this);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/EulerFunc.js\n// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nfunction fromRotationMatrix(out, m, order = 'YXZ') {\n  if (order === 'XYZ') {\n    out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n\n    if (Math.abs(m[8]) < 0.99999) {\n      out[0] = Math.atan2(-m[9], m[10]);\n      out[2] = Math.atan2(-m[4], m[0]);\n    } else {\n      out[0] = Math.atan2(m[6], m[5]);\n      out[2] = 0;\n    }\n  } else if (order === 'YXZ') {\n    out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n\n    if (Math.abs(m[9]) < 0.99999) {\n      out[1] = Math.atan2(m[8], m[10]);\n      out[2] = Math.atan2(m[1], m[5]);\n    } else {\n      out[1] = Math.atan2(-m[2], m[0]);\n      out[2] = 0;\n    }\n  } else if (order === 'ZXY') {\n    out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n\n    if (Math.abs(m[6]) < 0.99999) {\n      out[1] = Math.atan2(-m[2], m[10]);\n      out[2] = Math.atan2(-m[4], m[5]);\n    } else {\n      out[1] = 0;\n      out[2] = Math.atan2(m[1], m[0]);\n    }\n  } else if (order === 'ZYX') {\n    out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n\n    if (Math.abs(m[2]) < 0.99999) {\n      out[0] = Math.atan2(m[6], m[10]);\n      out[2] = Math.atan2(m[1], m[0]);\n    } else {\n      out[0] = 0;\n      out[2] = Math.atan2(-m[4], m[5]);\n    }\n  } else if (order === 'YZX') {\n    out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n\n    if (Math.abs(m[1]) < 0.99999) {\n      out[0] = Math.atan2(-m[9], m[5]);\n      out[1] = Math.atan2(-m[2], m[0]);\n    } else {\n      out[0] = 0;\n      out[1] = Math.atan2(m[8], m[10]);\n    }\n  } else if (order === 'XZY') {\n    out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n\n    if (Math.abs(m[4]) < 0.99999) {\n      out[0] = Math.atan2(m[6], m[5]);\n      out[1] = Math.atan2(m[8], m[0]);\n    } else {\n      out[0] = Math.atan2(-m[9], m[10]);\n      out[1] = 0;\n    }\n  }\n\n  return out;\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Euler.js\n\n\nconst tmpMat4 = new Mat4_Mat4();\nclass Euler_Euler extends Array {\n  constructor(x = 0, y = x, z = x, order = 'YXZ') {\n    super(x, y, z);\n    this.order = order;\n\n    this.onChange = () => {};\n\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set x(v) {\n    this[0] = v;\n    this.onChange();\n  }\n\n  set y(v) {\n    this[1] = v;\n    this.onChange();\n  }\n\n  set z(v) {\n    this[2] = v;\n    this.onChange();\n  }\n\n  set(x, y = x, z = x) {\n    if (x.length) return this.copy(x);\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this.onChange();\n    return this;\n  }\n\n  copy(v) {\n    this[0] = v[0];\n    this[1] = v[1];\n    this[2] = v[2];\n    this.onChange();\n    return this;\n  }\n\n  reorder(order) {\n    this.order = order;\n    this.onChange();\n    return this;\n  }\n\n  fromRotationMatrix(m, order = this.order) {\n    fromRotationMatrix(this, m, order);\n    return this;\n  }\n\n  fromQuaternion(q, order = this.order) {\n    tmpMat4.fromQuaternion(q);\n    return this.fromRotationMatrix(tmpMat4, order);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/Transform.js\n\n\n\n\nclass Transform_Transform {\n  constructor() {\n    this.parent = null;\n    this.children = [];\n    this.visible = true;\n    this.matrix = new Mat4_Mat4();\n    this.worldMatrix = new Mat4_Mat4();\n    this.matrixAutoUpdate = true;\n    this.position = new Vec3_Vec3();\n    this.quaternion = new Quat_Quat();\n    this.scale = new Vec3_Vec3(1);\n    this.rotation = new Euler_Euler();\n    this.up = new Vec3_Vec3(0, 1, 0);\n\n    this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n\n    this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n  }\n\n  setParent(parent, notifyParent = true) {\n    if (notifyParent && this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n    this.parent = parent;\n    if (notifyParent && parent) parent.addChild(this, false);\n  }\n\n  addChild(child, notifyChild = true) {\n    if (!~this.children.indexOf(child)) this.children.push(child);\n    if (notifyChild) child.setParent(this, false);\n  }\n\n  removeChild(child, notifyChild = true) {\n    if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n    if (notifyChild) child.setParent(null, false);\n  }\n\n  updateMatrixWorld(force) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n\n    if (this.worldMatrixNeedsUpdate || force) {\n      if (this.parent === null) this.worldMatrix.copy(this.matrix);else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n      this.worldMatrixNeedsUpdate = false;\n      force = true;\n    }\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  }\n\n  updateMatrix() {\n    this.matrix.compose(this.quaternion, this.position, this.scale);\n    this.worldMatrixNeedsUpdate = true;\n  }\n\n  traverse(callback) {\n    // Return true in callback to stop traversing children\n    if (callback(this)) return;\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].traverse(callback);\n    }\n  }\n\n  decompose() {\n    this.matrix.getTranslation(this.position);\n    this.matrix.getRotation(this.quaternion);\n    this.matrix.getScaling(this.scale);\n    this.rotation.fromQuaternion(this.quaternion);\n  }\n\n  lookAt(target, invert = false) {\n    if (invert) this.matrix.lookAt(this.position, target, this.up);else this.matrix.lookAt(target, this.position, this.up);\n    this.matrix.getRotation(this.quaternion);\n    this.rotation.fromQuaternion(this.quaternion);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/Camera.js\n\n\n\nconst tempMat4 = new Mat4_Mat4();\nconst tempVec3a = new Vec3_Vec3();\nconst tempVec3b = new Vec3_Vec3();\nclass Camera_Camera extends Transform_Transform {\n  constructor(gl, {\n    near = 0.1,\n    far = 100,\n    fov = 45,\n    aspect = 1,\n    left,\n    right,\n    bottom,\n    top,\n    zoom = 1\n  } = {}) {\n    super();\n    Object.assign(this, {\n      near,\n      far,\n      fov,\n      aspect,\n      left,\n      right,\n      bottom,\n      top,\n      zoom\n    });\n    this.projectionMatrix = new Mat4_Mat4();\n    this.viewMatrix = new Mat4_Mat4();\n    this.projectionViewMatrix = new Mat4_Mat4();\n    this.worldPosition = new Vec3_Vec3(); // Use orthographic if left/right set, else default to perspective camera\n\n    this.type = left || right ? 'orthographic' : 'perspective';\n    if (this.type === 'orthographic') this.orthographic();else this.perspective();\n  }\n\n  perspective({\n    near = this.near,\n    far = this.far,\n    fov = this.fov,\n    aspect = this.aspect\n  } = {}) {\n    Object.assign(this, {\n      near,\n      far,\n      fov,\n      aspect\n    });\n    this.projectionMatrix.fromPerspective({\n      fov: fov * (Math.PI / 180),\n      aspect,\n      near,\n      far\n    });\n    this.type = 'perspective';\n    return this;\n  }\n\n  orthographic({\n    near = this.near,\n    far = this.far,\n    left = this.left,\n    right = this.right,\n    bottom = this.bottom,\n    top = this.top,\n    zoom = this.zoom\n  } = {}) {\n    Object.assign(this, {\n      near,\n      far,\n      left,\n      right,\n      bottom,\n      top,\n      zoom\n    });\n    left /= zoom;\n    right /= zoom;\n    bottom /= zoom;\n    top /= zoom;\n    this.projectionMatrix.fromOrthogonal({\n      left,\n      right,\n      bottom,\n      top,\n      near,\n      far\n    });\n    this.type = 'orthographic';\n    return this;\n  }\n\n  updateMatrixWorld() {\n    super.updateMatrixWorld();\n    this.viewMatrix.inverse(this.worldMatrix);\n    this.worldMatrix.getTranslation(this.worldPosition); // used for sorting\n\n    this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n    return this;\n  }\n\n  lookAt(target) {\n    super.lookAt(target, true);\n    return this;\n  } // Project 3D coordinate to 2D point\n\n\n  project(v) {\n    v.applyMatrix4(this.viewMatrix);\n    v.applyMatrix4(this.projectionMatrix);\n    return this;\n  } // Unproject 2D point to 3D coordinate\n\n\n  unproject(v) {\n    v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n    v.applyMatrix4(this.worldMatrix);\n    return this;\n  }\n\n  updateFrustum() {\n    if (!this.frustum) {\n      this.frustum = [new Vec3_Vec3(), new Vec3_Vec3(), new Vec3_Vec3(), new Vec3_Vec3(), new Vec3_Vec3(), new Vec3_Vec3()];\n    }\n\n    const m = this.projectionViewMatrix;\n    this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n\n    this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n\n    this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n\n    this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n\n    this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n\n    this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n    for (let i = 0; i < 6; i++) {\n      const invLen = 1.0 / this.frustum[i].distance();\n      this.frustum[i].multiply(invLen);\n      this.frustum[i].constant *= invLen;\n    }\n  }\n\n  frustumIntersectsMesh(node) {\n    // If no position attribute, treat as frustumCulled false\n    if (!node.geometry.attributes.position) return true;\n    if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n    if (!node.geometry.bounds) return true;\n    const center = tempVec3a;\n    center.copy(node.geometry.bounds.center);\n    center.applyMatrix4(node.worldMatrix);\n    const radius = node.geometry.bounds.radius * node.worldMatrix.getMaxScaleOnAxis();\n    return this.frustumIntersectsSphere(center, radius);\n  }\n\n  frustumIntersectsSphere(center, radius) {\n    const normal = tempVec3b;\n\n    for (let i = 0; i < 6; i++) {\n      const plane = this.frustum[i];\n      const distance = normal.copy(plane).dot(center) + plane.constant;\n      if (distance < -radius) return false;\n    }\n\n    return true;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/Mat3Func.js\nconst Mat3Func_EPSILON = 0.000001;\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nfunction Mat3Func_fromQuat(out, q) {\n  let x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\n\nfunction Mat3Func_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nfunction Mat3Func_set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nfunction Mat3Func_identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\n\nfunction Mat3Func_transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\n\nfunction Mat3Func_invert(out, a) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  let a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  let a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nfunction Mat3Func_determinant(a) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  let a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  let a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\n\nfunction Mat3Func_multiply(out, a, b) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  let a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  let a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  let b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  let b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  let b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\n\nfunction Mat3Func_translate(out, a, v) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nfunction Mat3Func_rotate(out, a, rad) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nfunction Mat3Func_scale(out, a, v) {\n  let x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nfunction normalFromMat4(out, a) {\n  let a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  let a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  let a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  let a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\n\nfunction Mat3Func_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\n\nfunction Mat3Func_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nfunction Mat3Func_multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Mat3.js\n\nclass Mat3_Mat3 extends Array {\n  constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n    super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n    return this;\n  }\n\n  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    if (m00.length) return this.copy(m00);\n    Mat3Func_set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n    return this;\n  }\n\n  translate(v, m = this) {\n    Mat3Func_translate(this, m, v);\n    return this;\n  }\n\n  rotate(v, m = this) {\n    Mat3Func_rotate(this, m, v);\n    return this;\n  }\n\n  scale(v, m = this) {\n    Mat3Func_scale(this, m, v);\n    return this;\n  }\n\n  multiply(ma, mb) {\n    if (mb) {\n      Mat3Func_multiply(this, ma, mb);\n    } else {\n      Mat3Func_multiply(this, this, ma);\n    }\n\n    return this;\n  }\n\n  identity() {\n    Mat3Func_identity(this);\n    return this;\n  }\n\n  copy(m) {\n    Mat3Func_copy(this, m);\n    return this;\n  }\n\n  fromMatrix4(m) {\n    fromMat4(this, m);\n    return this;\n  }\n\n  fromQuaternion(q) {\n    Mat3Func_fromQuat(this, q);\n    return this;\n  }\n\n  fromBasis(vec3a, vec3b, vec3c) {\n    this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n    return this;\n  }\n\n  inverse(m = this) {\n    Mat3Func_invert(this, m);\n    return this;\n  }\n\n  getNormalMatrix(m) {\n    normalFromMat4(this, m);\n    return this;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/Mesh.js\n\n\n\nlet Mesh_ID = 0;\nclass Mesh_Mesh extends Transform_Transform {\n  constructor(gl, {\n    geometry,\n    program,\n    mode = gl.TRIANGLES,\n    frustumCulled = true,\n    renderOrder = 0\n  } = {}) {\n    super();\n    if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n    this.gl = gl;\n    this.id = Mesh_ID++;\n    this.geometry = geometry;\n    this.program = program;\n    this.mode = mode; // Used to skip frustum culling\n\n    this.frustumCulled = frustumCulled; // Override sorting to force an order\n\n    this.renderOrder = renderOrder;\n    this.modelViewMatrix = new Mat4_Mat4();\n    this.normalMatrix = new Mat3_Mat3();\n    this.beforeRenderCallbacks = [];\n    this.afterRenderCallbacks = [];\n  }\n\n  onBeforeRender(f) {\n    this.beforeRenderCallbacks.push(f);\n    return this;\n  }\n\n  onAfterRender(f) {\n    this.afterRenderCallbacks.push(f);\n    return this;\n  }\n\n  draw({\n    camera\n  } = {}) {\n    this.beforeRenderCallbacks.forEach(f => f && f({\n      mesh: this,\n      camera\n    }));\n\n    if (camera) {\n      // Add empty matrix uniforms to program if unset\n      if (!this.program.uniforms.modelMatrix) {\n        Object.assign(this.program.uniforms, {\n          modelMatrix: {\n            value: null\n          },\n          viewMatrix: {\n            value: null\n          },\n          modelViewMatrix: {\n            value: null\n          },\n          normalMatrix: {\n            value: null\n          },\n          projectionMatrix: {\n            value: null\n          },\n          cameraPosition: {\n            value: null\n          }\n        });\n      } // Set the matrix uniforms\n\n\n      this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n      this.program.uniforms.cameraPosition.value = camera.worldPosition;\n      this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n      this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n      this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n      this.program.uniforms.modelMatrix.value = this.worldMatrix;\n      this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n      this.program.uniforms.normalMatrix.value = this.normalMatrix;\n    } // determine if faces need to be flipped - when mesh scaled negatively\n\n\n    let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n    this.program.use({\n      flipFaces\n    });\n    this.geometry.draw({\n      mode: this.mode,\n      program: this.program\n    });\n    this.afterRenderCallbacks.forEach(f => f && f({\n      mesh: this,\n      camera\n    }));\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/Texture.js\n// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n  return (value & value - 1) === 0;\n}\n\nlet Texture_ID = 1;\nclass Texture {\n  constructor(gl, {\n    image,\n    target = gl.TEXTURE_2D,\n    type = gl.UNSIGNED_BYTE,\n    format = gl.RGBA,\n    internalFormat = format,\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    generateMipmaps = true,\n    minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n    magFilter = gl.LINEAR,\n    premultiplyAlpha = false,\n    unpackAlignment = 4,\n    flipY = target == gl.TEXTURE_2D ? true : false,\n    anisotropy = 0,\n    level = 0,\n    width,\n    // used for RenderTargets or Data Textures\n    height = width\n  } = {}) {\n    this.gl = gl;\n    this.id = Texture_ID++;\n    this.image = image;\n    this.target = target;\n    this.type = type;\n    this.format = format;\n    this.internalFormat = internalFormat;\n    this.minFilter = minFilter;\n    this.magFilter = magFilter;\n    this.wrapS = wrapS;\n    this.wrapT = wrapT;\n    this.generateMipmaps = generateMipmaps;\n    this.premultiplyAlpha = premultiplyAlpha;\n    this.unpackAlignment = unpackAlignment;\n    this.flipY = flipY;\n    this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n    this.level = level;\n    this.width = width;\n    this.height = height;\n    this.texture = this.gl.createTexture();\n    this.store = {\n      image: null\n    }; // Alias for state store to avoid redundant calls for global state\n\n    this.glState = this.gl.renderer.state; // State store to avoid redundant calls for per-texture state\n\n    this.state = {};\n    this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n    this.state.magFilter = this.gl.LINEAR;\n    this.state.wrapS = this.gl.REPEAT;\n    this.state.wrapT = this.gl.REPEAT;\n    this.state.anisotropy = 0;\n  }\n\n  bind() {\n    // Already bound to active texture unit\n    if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n    this.gl.bindTexture(this.target, this.texture);\n    this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n  }\n\n  update(textureUnit = 0) {\n    const needsUpdate = !(this.image === this.store.image && !this.needsUpdate); // Make sure that texture is bound to its texture unit\n\n    if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n      // set active texture unit to perform texture functions\n      this.gl.renderer.activeTexture(textureUnit);\n      this.bind();\n    }\n\n    if (!needsUpdate) return;\n    this.needsUpdate = false;\n\n    if (this.flipY !== this.glState.flipY) {\n      this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n      this.glState.flipY = this.flipY;\n    }\n\n    if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n      this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n      this.glState.premultiplyAlpha = this.premultiplyAlpha;\n    }\n\n    if (this.unpackAlignment !== this.glState.unpackAlignment) {\n      this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n      this.glState.unpackAlignment = this.unpackAlignment;\n    }\n\n    if (this.minFilter !== this.state.minFilter) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n      this.state.minFilter = this.minFilter;\n    }\n\n    if (this.magFilter !== this.state.magFilter) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n      this.state.magFilter = this.magFilter;\n    }\n\n    if (this.wrapS !== this.state.wrapS) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n      this.state.wrapS = this.wrapS;\n    }\n\n    if (this.wrapT !== this.state.wrapT) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n      this.state.wrapT = this.wrapT;\n    }\n\n    if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n      this.gl.texParameterf(this.target, this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropy);\n      this.state.anisotropy = this.anisotropy;\n    }\n\n    if (this.image) {\n      if (this.image.width) {\n        this.width = this.image.width;\n        this.height = this.image.height;\n      }\n\n      if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n        // For cube maps\n        for (let i = 0; i < 6; i++) {\n          this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.level, this.internalFormat, this.format, this.type, this.image[i]);\n        }\n      } else if (ArrayBuffer.isView(this.image)) {\n        // Data texture\n        this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\n      } else if (this.image.isCompressedTexture) {\n        // Compressed texture\n        for (let level = 0; level < this.image.length; level++) {\n          this.gl.compressedTexImage2D(this.target, level, this.internalFormat, this.image[level].width, this.image[level].height, 0, this.image[level].data);\n        }\n      } else {\n        // Regular texture\n        this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n      }\n\n      if (this.generateMipmaps) {\n        // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n        if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n          this.generateMipmaps = false;\n          this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n          this.minFilter = this.gl.LINEAR;\n        } else {\n          this.gl.generateMipmap(this.target);\n        }\n      } // Callback for when data is pushed to GPU\n\n\n      this.onUpdate && this.onUpdate();\n    } else {\n      if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n        // Upload empty pixel for each side while no image to avoid errors while image or video loading\n        for (let i = 0; i < 6; i++) {\n          this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n        }\n      } else if (this.width) {\n        // image intentionally left null for RenderTarget\n        this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n      } else {\n        // Upload empty pixel if no image to avoid errors while image or video loading\n        this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n      }\n    }\n\n    this.store.image = this.image;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/core/RenderTarget.js\n// TODO: multi target rendering\n// TODO: test stencil and depth\n// TODO: destroy\n// TODO: blit on resize?\n\nclass RenderTarget_RenderTarget {\n  constructor(gl, {\n    width = gl.canvas.width,\n    height = gl.canvas.height,\n    target = gl.FRAMEBUFFER,\n    color = 1,\n    // number of color attachments\n    depth = true,\n    stencil = false,\n    depthTexture = false,\n    // note - stencil breaks\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    minFilter = gl.LINEAR,\n    magFilter = minFilter,\n    type = gl.UNSIGNED_BYTE,\n    format = gl.RGBA,\n    internalFormat = format,\n    unpackAlignment,\n    premultiplyAlpha\n  } = {}) {\n    this.gl = gl;\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.buffer = this.gl.createFramebuffer();\n    this.target = target;\n    this.gl.bindFramebuffer(this.target, this.buffer);\n    this.textures = [];\n    const drawBuffers = []; // create and attach required num of color textures\n\n    for (let i = 0; i < color; i++) {\n      this.textures.push(new Texture(gl, {\n        width,\n        height,\n        wrapS,\n        wrapT,\n        minFilter,\n        magFilter,\n        type,\n        format,\n        internalFormat,\n        unpackAlignment,\n        premultiplyAlpha,\n        flipY: false,\n        generateMipmaps: false\n      }));\n      this.textures[i].update();\n      this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0\n      /* level */\n      );\n      drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n    } // For multi-render targets shader access\n\n\n    if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers); // alias for majority of use cases\n\n    this.texture = this.textures[0]; // note depth textures break stencil - so can't use together\n\n    if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n      this.depthTexture = new Texture(gl, {\n        width,\n        height,\n        minFilter: this.gl.NEAREST,\n        magFilter: this.gl.NEAREST,\n        format: this.gl.DEPTH_COMPONENT,\n        internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n        type: this.gl.UNSIGNED_INT\n      });\n      this.depthTexture.update();\n      this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0\n      /* level */\n      );\n    } else {\n      // Render buffers\n      if (depth && !stencil) {\n        this.depthBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n      }\n\n      if (stencil && !depth) {\n        this.stencilBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n      }\n\n      if (depth && stencil) {\n        this.depthStencilBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n      }\n    }\n\n    this.gl.bindFramebuffer(this.target, null);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/ColorFunc.js\nconst NAMES = {\n  black: '#000000',\n  white: '#ffffff',\n  red: '#ff0000',\n  green: '#00ff00',\n  blue: '#0000ff',\n  fuchsia: '#ff00ff',\n  cyan: '#00ffff',\n  yellow: '#ffff00',\n  orange: '#ff8000'\n};\nfunction hexToRGB(hex) {\n  if (hex.length === 4) hex = hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n  const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!rgb) console.warn(`Unable to convert hex string ${hex} to rgb values`);\n  return [parseInt(rgb[1], 16) / 255, parseInt(rgb[2], 16) / 255, parseInt(rgb[3], 16) / 255];\n}\nfunction numberToRGB(num) {\n  num = parseInt(num);\n  return [(num >> 16 & 255) / 255, (num >> 8 & 255) / 255, (num & 255) / 255];\n}\nfunction parseColor(color) {\n  // Empty\n  if (color === undefined) return [0, 0, 0]; // Decimal\n\n  if (arguments.length === 3) return arguments; // Number\n\n  if (!isNaN(color)) return numberToRGB(color); // Hex\n\n  if (color[0] === '#') return hexToRGB(color); // Names\n\n  if (NAMES[color.toLowerCase()]) return hexToRGB(NAMES[color.toLowerCase()]);\n  console.warn('Color format not recognised');\n  return [0, 0, 0];\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Color.js\n // Color stored as an array of RGB decimal values (between 0 > 1)\n// Constructor and set method accept following formats:\n// new Color() - Empty (defaults to black)\n// new Color([0.2, 0.4, 1.0]) - Decimal Array (or another Color instance)\n// new Color(0.7, 0.0, 0.1) - Decimal RGB values\n// new Color('#ff0000') - Hex string\n// new Color('#ccc') - Short-hand Hex string\n// new Color(0x4f27e8) - Number\n// new Color('red') - Color name string (short list in ColorFunc.js)\n\nclass Color_Color extends Array {\n  constructor(color) {\n    if (Array.isArray(color)) return super(...color);\n    return super(...parseColor(...arguments));\n  }\n\n  get r() {\n    return this[0];\n  }\n\n  get g() {\n    return this[1];\n  }\n\n  get b() {\n    return this[2];\n  }\n\n  set r(v) {\n    this[0] = v;\n  }\n\n  set g(v) {\n    this[1] = v;\n  }\n\n  set b(v) {\n    this[2] = v;\n  }\n\n  set(color) {\n    if (Array.isArray(color)) return this.copy(color);\n    return this.copy(parseColor(...arguments));\n  }\n\n  copy(v) {\n    this[0] = v[0];\n    this[1] = v[1];\n    this[2] = v[2];\n    return this;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/functions/Vec2Func.js\nconst Vec2Func_EPSILON = 0.000001;\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\n\nfunction Vec2Func_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nfunction Vec2Func_set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction Vec2Func_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction Vec2Func_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction Vec2Func_multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction Vec2Func_divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nfunction Vec2Func_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction Vec2Func_distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction Vec2Func_squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction Vec2Func_length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction Vec2Func_squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\n\nfunction Vec2Func_negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\n\nfunction Vec2Func_inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\n\nfunction Vec2Func_normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction Vec2Func_dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\n\nfunction Vec2Func_cross(a, b) {\n  return a[0] * b[1] - a[1] * b[0];\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\n\nfunction Vec2Func_lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction Vec2Func_transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction Vec2Func_transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction Vec2Func_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Vec2.js\n\nclass Vec2_Vec2 extends Array {\n  constructor(x = 0, y = x) {\n    super(x, y);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set x(v) {\n    this[0] = v;\n  }\n\n  set y(v) {\n    this[1] = v;\n  }\n\n  set(x, y = x) {\n    if (x.length) return this.copy(x);\n    Vec2Func_set(this, x, y);\n    return this;\n  }\n\n  copy(v) {\n    Vec2Func_copy(this, v);\n    return this;\n  }\n\n  add(va, vb) {\n    if (vb) Vec2Func_add(this, va, vb);else Vec2Func_add(this, this, va);\n    return this;\n  }\n\n  sub(va, vb) {\n    if (vb) Vec2Func_subtract(this, va, vb);else Vec2Func_subtract(this, this, va);\n    return this;\n  }\n\n  multiply(v) {\n    if (v.length) Vec2Func_multiply(this, this, v);else Vec2Func_scale(this, this, v);\n    return this;\n  }\n\n  divide(v) {\n    if (v.length) Vec2Func_divide(this, this, v);else Vec2Func_scale(this, this, 1 / v);\n    return this;\n  }\n\n  inverse(v = this) {\n    Vec2Func_inverse(this, v);\n    return this;\n  } // Can't use 'length' as Array.prototype uses it\n\n\n  len() {\n    return Vec2Func_length(this);\n  }\n\n  distance(v) {\n    if (v) return Vec2Func_distance(this, v);else return Vec2Func_length(this);\n  }\n\n  squaredLen() {\n    return this.squaredDistance();\n  }\n\n  squaredDistance(v) {\n    if (v) return Vec2Func_squaredDistance(this, v);else return Vec2Func_squaredLength(this);\n  }\n\n  negate(v = this) {\n    Vec2Func_negate(this, v);\n    return this;\n  }\n\n  cross(va, vb) {\n    if (vb) return Vec2Func_cross(va, vb);\n    return Vec2Func_cross(this, va);\n  }\n\n  scale(v) {\n    Vec2Func_scale(this, this, v);\n    return this;\n  }\n\n  normalize() {\n    Vec2Func_normalize(this, this);\n    return this;\n  }\n\n  dot(v) {\n    return Vec2Func_dot(this, v);\n  }\n\n  equals(v) {\n    return Vec2Func_exactEquals(this, v);\n  }\n\n  applyMatrix3(mat3) {\n    Vec2Func_transformMat3(this, this, mat3);\n    return this;\n  }\n\n  applyMatrix4(mat4) {\n    Vec2Func_transformMat4(this, this, mat4);\n    return this;\n  }\n\n  lerp(v, a) {\n    Vec2Func_lerp(this, this, v, a);\n  }\n\n  clone() {\n    return new Vec2_Vec2(this[0], this[1]);\n  }\n\n  fromArray(a, o = 0) {\n    this[0] = a[o];\n    this[1] = a[o + 1];\n    return this;\n  }\n\n  toArray(a = [], o = 0) {\n    a[o] = this[0];\n    a[o + 1] = this[1];\n    return a;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/math/Vec4.js\n\nclass Vec4_Vec4 extends Array {\n  constructor(x = 0, y = x, z = x, w = x) {\n    super(x, y, z, w);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set x(v) {\n    this[0] = v;\n  }\n\n  set y(v) {\n    this[1] = v;\n  }\n\n  set z(v) {\n    this[2] = v;\n  }\n\n  set w(v) {\n    this[3] = v;\n  }\n\n  set(x, y, z, w) {\n    if (x.length) return this.copy(x);\n    Vec4Func_set(this, x, y, z, w);\n    return this;\n  }\n\n  copy(v) {\n    Vec4Func_copy(this, v);\n    return this;\n  }\n\n  normalize() {\n    Vec4Func_normalize(this, this);\n    return this;\n  }\n\n  fromArray(a, o = 0) {\n    this[0] = a[o];\n    this[1] = a[o + 1];\n    this[2] = a[o + 2];\n    this[3] = a[o + 3];\n    return this;\n  }\n\n  toArray(a = [], o = 0) {\n    a[o] = this[0];\n    a[o + 1] = this[1];\n    a[o + 2] = this[2];\n    a[o + 3] = this[3];\n    return a;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Plane.js\n\nclass Plane_Plane extends Geometry_Geometry {\n  constructor(gl, {\n    width = 1,\n    height = 1,\n    widthSegments = 1,\n    heightSegments = 1,\n    attributes = {}\n  } = {}) {\n    const wSegs = widthSegments;\n    const hSegs = heightSegments; // Determine length of arrays\n\n    const num = (wSegs + 1) * (hSegs + 1);\n    const numIndices = wSegs * hSegs * 6; // Generate empty arrays once\n\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    Plane_Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: position\n      },\n      normal: {\n        size: 3,\n        data: normal\n      },\n      uv: {\n        size: 2,\n        data: uv\n      },\n      index: {\n        data: index\n      }\n    });\n    super(gl, attributes);\n  }\n\n  static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n    const io = i;\n    const segW = width / wSegs;\n    const segH = height / hSegs;\n\n    for (let iy = 0; iy <= hSegs; iy++) {\n      let y = iy * segH - height / 2;\n\n      for (let ix = 0; ix <= wSegs; ix++, i++) {\n        let x = ix * segW - width / 2;\n        position[i * 3 + u] = x * uDir;\n        position[i * 3 + v] = y * vDir;\n        position[i * 3 + w] = depth / 2;\n        normal[i * 3 + u] = 0;\n        normal[i * 3 + v] = 0;\n        normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n        uv[i * 2] = ix / wSegs;\n        uv[i * 2 + 1] = 1 - iy / hSegs;\n        if (iy === hSegs || ix === wSegs) continue;\n        let a = io + ix + iy * (wSegs + 1);\n        let b = io + ix + (iy + 1) * (wSegs + 1);\n        let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n        let d = io + ix + iy * (wSegs + 1) + 1;\n        index[ii * 6] = a;\n        index[ii * 6 + 1] = b;\n        index[ii * 6 + 2] = d;\n        index[ii * 6 + 3] = b;\n        index[ii * 6 + 4] = c;\n        index[ii * 6 + 5] = d;\n        ii++;\n      }\n    }\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Box.js\n\n\nclass Box_Box extends Geometry_Geometry {\n  constructor(gl, {\n    width = 1,\n    height = 1,\n    depth = 1,\n    widthSegments = 1,\n    heightSegments = 1,\n    depthSegments = 1,\n    attributes = {}\n  } = {}) {\n    const wSegs = widthSegments;\n    const hSegs = heightSegments;\n    const dSegs = depthSegments;\n    const num = (wSegs + 1) * (hSegs + 1) * 2 + (wSegs + 1) * (dSegs + 1) * 2 + (hSegs + 1) * (dSegs + 1) * 2;\n    const numIndices = (wSegs * hSegs * 2 + wSegs * dSegs * 2 + hSegs * dSegs * 2) * 6;\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    let i = 0;\n    let ii = 0; // left, right\n\n    Plane_Plane.buildPlane(position, normal, uv, index, depth, height, width, dSegs, hSegs, 2, 1, 0, -1, -1, i, ii);\n    Plane_Plane.buildPlane(position, normal, uv, index, depth, height, -width, dSegs, hSegs, 2, 1, 0, 1, -1, i += (dSegs + 1) * (hSegs + 1), ii += dSegs * hSegs); // top, bottom\n\n    Plane_Plane.buildPlane(position, normal, uv, index, width, depth, height, dSegs, hSegs, 0, 2, 1, 1, 1, i += (dSegs + 1) * (hSegs + 1), ii += dSegs * hSegs);\n    Plane_Plane.buildPlane(position, normal, uv, index, width, depth, -height, dSegs, hSegs, 0, 2, 1, 1, -1, i += (wSegs + 1) * (dSegs + 1), ii += wSegs * dSegs); // front, back\n\n    Plane_Plane.buildPlane(position, normal, uv, index, width, height, -depth, wSegs, hSegs, 0, 1, 2, -1, -1, i += (wSegs + 1) * (dSegs + 1), ii += wSegs * dSegs);\n    Plane_Plane.buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, 0, 1, 2, 1, -1, i += (wSegs + 1) * (hSegs + 1), ii += wSegs * hSegs);\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: position\n      },\n      normal: {\n        size: 3,\n        data: normal\n      },\n      uv: {\n        size: 2,\n        data: uv\n      },\n      index: {\n        data: index\n      }\n    });\n    super(gl, attributes);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Sphere.js\n\n\nclass Sphere_Sphere extends Geometry_Geometry {\n  constructor(gl, {\n    radius = 0.5,\n    widthSegments = 16,\n    heightSegments = Math.ceil(widthSegments * 0.5),\n    phiStart = 0,\n    phiLength = Math.PI * 2,\n    thetaStart = 0,\n    thetaLength = Math.PI,\n    attributes = {}\n  } = {}) {\n    const wSegs = widthSegments;\n    const hSegs = heightSegments;\n    const pStart = phiStart;\n    const pLength = phiLength;\n    const tStart = thetaStart;\n    const tLength = thetaLength;\n    const num = (wSegs + 1) * (hSegs + 1);\n    const numIndices = wSegs * hSegs * 6;\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    let i = 0;\n    let iv = 0;\n    let ii = 0;\n    let te = tStart + tLength;\n    const grid = [];\n    let n = new Vec3_Vec3();\n\n    for (let iy = 0; iy <= hSegs; iy++) {\n      let vRow = [];\n      let v = iy / hSegs;\n\n      for (let ix = 0; ix <= wSegs; ix++, i++) {\n        let u = ix / wSegs;\n        let x = -radius * Math.cos(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n        let y = radius * Math.cos(tStart + v * tLength);\n        let z = radius * Math.sin(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n        position[i * 3] = x;\n        position[i * 3 + 1] = y;\n        position[i * 3 + 2] = z;\n        n.set(x, y, z).normalize();\n        normal[i * 3] = n.x;\n        normal[i * 3 + 1] = n.y;\n        normal[i * 3 + 2] = n.z;\n        uv[i * 2] = u;\n        uv[i * 2 + 1] = 1 - v;\n        vRow.push(iv++);\n      }\n\n      grid.push(vRow);\n    }\n\n    for (let iy = 0; iy < hSegs; iy++) {\n      for (let ix = 0; ix < wSegs; ix++) {\n        let a = grid[iy][ix + 1];\n        let b = grid[iy][ix];\n        let c = grid[iy + 1][ix];\n        let d = grid[iy + 1][ix + 1];\n\n        if (iy !== 0 || tStart > 0) {\n          index[ii * 3] = a;\n          index[ii * 3 + 1] = b;\n          index[ii * 3 + 2] = d;\n          ii++;\n        }\n\n        if (iy !== hSegs - 1 || te < Math.PI) {\n          index[ii * 3] = b;\n          index[ii * 3 + 1] = c;\n          index[ii * 3 + 2] = d;\n          ii++;\n        }\n      }\n    }\n\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: position\n      },\n      normal: {\n        size: 3,\n        data: normal\n      },\n      uv: {\n        size: 2,\n        data: uv\n      },\n      index: {\n        data: index\n      }\n    });\n    super(gl, attributes);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Cylinder.js\n\n\nclass Cylinder_Cylinder extends Geometry_Geometry {\n  constructor(gl, {\n    radiusTop = 0.5,\n    radiusBottom = 0.5,\n    height = 1,\n    radialSegments = 8,\n    heightSegments = 1,\n    openEnded = false,\n    thetaStart = 0,\n    thetaLength = Math.PI * 2,\n    attributes = {}\n  } = {}) {\n    const rSegs = radialSegments;\n    const hSegs = heightSegments;\n    const tStart = thetaStart;\n    const tLength = thetaLength;\n    const numCaps = openEnded ? 0 : radiusBottom && radiusTop ? 2 : 1;\n    const num = (rSegs + 1) * (hSegs + 1 + numCaps) + numCaps;\n    const numIndices = rSegs * hSegs * 6 + numCaps * rSegs * 3;\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    let i = 0;\n    let ii = 0;\n    const indexArray = [];\n    addHeight();\n\n    if (!openEnded) {\n      if (radiusTop) addCap(true);\n      if (radiusBottom) addCap(false);\n    }\n\n    function addHeight() {\n      let x, y;\n      const n = new Vec3_Vec3();\n      const slope = (radiusBottom - radiusTop) / height;\n\n      for (y = 0; y <= hSegs; y++) {\n        const indexRow = [];\n        const v = y / hSegs;\n        const r = v * (radiusBottom - radiusTop) + radiusTop;\n\n        for (x = 0; x <= rSegs; x++) {\n          const u = x / rSegs;\n          const theta = u * tLength + tStart;\n          const sinTheta = Math.sin(theta);\n          const cosTheta = Math.cos(theta);\n          position.set([r * sinTheta, (0.5 - v) * height, r * cosTheta], i * 3);\n          n.set(sinTheta, slope, cosTheta).normalize();\n          normal.set([n.x, n.y, n.z], i * 3);\n          uv.set([u, 1 - v], i * 2);\n          indexRow.push(i++);\n        }\n\n        indexArray.push(indexRow);\n      }\n\n      for (x = 0; x < rSegs; x++) {\n        for (y = 0; y < hSegs; y++) {\n          const a = indexArray[y][x];\n          const b = indexArray[y + 1][x];\n          const c = indexArray[y + 1][x + 1];\n          const d = indexArray[y][x + 1];\n          index.set([a, b, d, b, c, d], ii * 3);\n          ii += 2;\n        }\n      }\n    }\n\n    function addCap(isTop) {\n      let x;\n      const r = isTop === true ? radiusTop : radiusBottom;\n      const sign = isTop === true ? 1 : -1;\n      const centerIndex = i;\n      position.set([0, 0.5 * height * sign, 0], i * 3);\n      normal.set([0, sign, 0], i * 3);\n      uv.set([0.5, 0.5], i * 2);\n      i++;\n\n      for (x = 0; x <= rSegs; x++) {\n        const u = x / rSegs;\n        const theta = u * tLength + tStart;\n        const cosTheta = Math.cos(theta);\n        const sinTheta = Math.sin(theta);\n        position.set([r * sinTheta, 0.5 * height * sign, r * cosTheta], i * 3);\n        normal.set([0, sign, 0], i * 3);\n        uv.set([cosTheta * 0.5 + 0.5, sinTheta * 0.5 * sign + 0.5], i * 2);\n        i++;\n      }\n\n      for (x = 0; x < rSegs; x++) {\n        const j = centerIndex + x + 1;\n\n        if (isTop) {\n          index.set([j, j + 1, centerIndex], ii * 3);\n        } else {\n          index.set([j + 1, j, centerIndex], ii * 3);\n        }\n\n        ii++;\n      }\n    }\n\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: position\n      },\n      normal: {\n        size: 3,\n        data: normal\n      },\n      uv: {\n        size: 2,\n        data: uv\n      },\n      index: {\n        data: index\n      }\n    });\n    super(gl, attributes);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Triangle.js\n\nclass Triangle_Triangle extends Geometry_Geometry {\n  constructor(gl, {\n    attributes = {}\n  } = {}) {\n    Object.assign(attributes, {\n      position: {\n        size: 2,\n        data: new Float32Array([-1, -1, 3, -1, -1, 3])\n      },\n      uv: {\n        size: 2,\n        data: new Float32Array([0, 0, 2, 0, 0, 2])\n      }\n    });\n    super(gl, attributes);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Torus.js\n// https://github.com/mrdoob/three.js/blob/master/src/geometries/TorusGeometry.js\n\n\nclass Torus_Torus extends Geometry_Geometry {\n  constructor(gl, {\n    radius = 0.5,\n    tube = 0.2,\n    radialSegments = 8,\n    tubularSegments = 6,\n    arc = Math.PI * 2,\n    attributes = {}\n  } = {}) {\n    const num = (radialSegments + 1) * (tubularSegments + 1);\n    const numIndices = radialSegments * tubularSegments * 6;\n    const vertices = new Float32Array(num * 3);\n    const normals = new Float32Array(num * 3);\n    const uvs = new Float32Array(num * 2);\n    const indices = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    const center = new Vec3_Vec3();\n    const vertex = new Vec3_Vec3();\n    const normal = new Vec3_Vec3(); // generate vertices, normals and uvs\n\n    let idx = 0;\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++, idx++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2; // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices.set([vertex.x, vertex.y, vertex.z], idx * 3); // normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.sub(vertex, center).normalize();\n        normals.set([normal.x, normal.y, normal.z], idx * 3); // uv\n\n        uvs.set([i / tubularSegments, j / radialSegments], idx * 2);\n      }\n    } // generate indices\n\n\n    idx = 0;\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++, idx++) {\n        // indices\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i; // faces\n\n        indices.set([a, b, d, b, c, d], idx * 6);\n      }\n    }\n\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: vertices\n      },\n      normal: {\n        size: 3,\n        data: normals\n      },\n      uv: {\n        size: 2,\n        data: uvs\n      },\n      index: {\n        data: indices\n      }\n    });\n    super(gl, attributes);\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Orbit.js\n// Based from ThreeJS' OrbitControls class, rewritten using es6 with some additions and subtractions.\n// TODO: abstract event handlers so can be fed from other sources\n// TODO: make scroll zoom more accurate than just >/< zero\n// TODO: be able to pass in new camera position\n\n\nconst STATE = {\n  NONE: -1,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2,\n  DOLLY_PAN: 3\n};\nconst Orbit_tempVec3 = new Vec3_Vec3();\nconst tempVec2a = new Vec2_Vec2();\nconst tempVec2b = new Vec2_Vec2();\nfunction Orbit(object, {\n  element = document,\n  enabled = true,\n  target = new Vec3_Vec3(),\n  ease = 0.25,\n  inertia = 0.85,\n  enableRotate = true,\n  rotateSpeed = 0.1,\n  autoRotate = false,\n  autoRotateSpeed = 1.0,\n  enableZoom = true,\n  zoomSpeed = 1,\n  enablePan = true,\n  panSpeed = 0.1,\n  minPolarAngle = 0,\n  maxPolarAngle = Math.PI,\n  minAzimuthAngle = -Infinity,\n  maxAzimuthAngle = Infinity,\n  minDistance = 0,\n  maxDistance = Infinity\n} = {}) {\n  this.enabled = enabled;\n  this.target = target; // Catch attempts to disable - set to 1 so has no effect\n\n  ease = ease || 1;\n  inertia = inertia || 1;\n  this.minDistance = minDistance;\n  this.maxDistance = maxDistance; // current position in sphericalTarget coordinates\n\n  const sphericalDelta = {\n    radius: 1,\n    phi: 0,\n    theta: 0\n  };\n  const sphericalTarget = {\n    radius: 1,\n    phi: 0,\n    theta: 0\n  };\n  const spherical = {\n    radius: 1,\n    phi: 0,\n    theta: 0\n  };\n  const panDelta = new Vec3_Vec3(); // Grab initial position values\n\n  const offset = new Vec3_Vec3();\n  offset.copy(object.position).sub(this.target);\n  spherical.radius = sphericalTarget.radius = offset.distance();\n  spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n  spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n\n  this.update = () => {\n    if (autoRotate) {\n      handleAutoRotate();\n    } // apply delta\n\n\n    sphericalTarget.radius *= sphericalDelta.radius;\n    sphericalTarget.theta += sphericalDelta.theta;\n    sphericalTarget.phi += sphericalDelta.phi; // apply boundaries\n\n    sphericalTarget.theta = Math.max(minAzimuthAngle, Math.min(maxAzimuthAngle, sphericalTarget.theta));\n    sphericalTarget.phi = Math.max(minPolarAngle, Math.min(maxPolarAngle, sphericalTarget.phi));\n    sphericalTarget.radius = Math.max(this.minDistance, Math.min(this.maxDistance, sphericalTarget.radius)); // ease values\n\n    spherical.phi += (sphericalTarget.phi - spherical.phi) * ease;\n    spherical.theta += (sphericalTarget.theta - spherical.theta) * ease;\n    spherical.radius += (sphericalTarget.radius - spherical.radius) * ease; // apply pan to target. As offset is relative to target, it also shifts\n\n    this.target.add(panDelta); // apply rotation to offset\n\n    let sinPhiRadius = spherical.radius * Math.sin(Math.max(0.000001, spherical.phi));\n    offset.x = sinPhiRadius * Math.sin(spherical.theta);\n    offset.y = spherical.radius * Math.cos(spherical.phi);\n    offset.z = sinPhiRadius * Math.cos(spherical.theta); // Apply updated values to object\n\n    object.position.copy(this.target).add(offset);\n    object.lookAt(this.target); // Apply inertia to values\n\n    sphericalDelta.theta *= inertia;\n    sphericalDelta.phi *= inertia;\n    panDelta.multiply(inertia); // Reset scale every frame to avoid applying scale multiple times\n\n    sphericalDelta.radius = 1;\n  }; // Everything below here just updates panDelta and sphericalDelta\n  // Using those two objects' values, the orbit is calculated\n\n\n  const rotateStart = new Vec2_Vec2();\n  const panStart = new Vec2_Vec2();\n  const dollyStart = new Vec2_Vec2();\n  let state = STATE.NONE;\n  this.mouseButtons = {\n    ORBIT: 0,\n    ZOOM: 1,\n    PAN: 2\n  };\n\n  function getZoomScale() {\n    return Math.pow(0.95, zoomSpeed);\n  }\n\n  function panLeft(distance, m) {\n    Orbit_tempVec3.set(m[0], m[1], m[2]);\n    Orbit_tempVec3.multiply(-distance);\n    panDelta.add(Orbit_tempVec3);\n  }\n\n  function panUp(distance, m) {\n    Orbit_tempVec3.set(m[4], m[5], m[6]);\n    Orbit_tempVec3.multiply(distance);\n    panDelta.add(Orbit_tempVec3);\n  }\n\n  const pan = (deltaX, deltaY) => {\n    let el = element === document ? document.body : element;\n    Orbit_tempVec3.copy(object.position).sub(this.target);\n    let targetDistance = Orbit_tempVec3.distance();\n    targetDistance *= Math.tan((object.fov || 45) / 2 * Math.PI / 180.0);\n    panLeft(2 * deltaX * targetDistance / el.clientHeight, object.matrix);\n    panUp(2 * deltaY * targetDistance / el.clientHeight, object.matrix);\n  };\n\n  function dolly(dollyScale) {\n    sphericalDelta.radius /= dollyScale;\n  }\n\n  function handleAutoRotate() {\n    const angle = 2 * Math.PI / 60 / 60 * autoRotateSpeed;\n    sphericalDelta.theta -= angle;\n  }\n\n  function handleMoveRotate(x, y) {\n    tempVec2a.set(x, y);\n    tempVec2b.sub(tempVec2a, rotateStart).multiply(rotateSpeed);\n    let el = element === document ? document.body : element;\n    sphericalDelta.theta -= 2 * Math.PI * tempVec2b.x / el.clientHeight;\n    sphericalDelta.phi -= 2 * Math.PI * tempVec2b.y / el.clientHeight;\n    rotateStart.copy(tempVec2a);\n  }\n\n  function handleMouseMoveDolly(e) {\n    tempVec2a.set(e.clientX, e.clientY);\n    tempVec2b.sub(tempVec2a, dollyStart);\n\n    if (tempVec2b.y > 0) {\n      dolly(getZoomScale());\n    } else if (tempVec2b.y < 0) {\n      dolly(1 / getZoomScale());\n    }\n\n    dollyStart.copy(tempVec2a);\n  }\n\n  function handleMovePan(x, y) {\n    tempVec2a.set(x, y);\n    tempVec2b.sub(tempVec2a, panStart).multiply(panSpeed);\n    pan(tempVec2b.x, tempVec2b.y);\n    panStart.copy(tempVec2a);\n  }\n\n  function handleTouchStartDollyPan(e) {\n    if (enableZoom) {\n      let dx = e.touches[0].pageX - e.touches[1].pageX;\n      let dy = e.touches[0].pageY - e.touches[1].pageY;\n      let distance = Math.sqrt(dx * dx + dy * dy);\n      dollyStart.set(0, distance);\n    }\n\n    if (enablePan) {\n      let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n      let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n      panStart.set(x, y);\n    }\n  }\n\n  function handleTouchMoveDollyPan(e) {\n    if (enableZoom) {\n      let dx = e.touches[0].pageX - e.touches[1].pageX;\n      let dy = e.touches[0].pageY - e.touches[1].pageY;\n      let distance = Math.sqrt(dx * dx + dy * dy);\n      tempVec2a.set(0, distance);\n      tempVec2b.set(0, Math.pow(tempVec2a.y / dollyStart.y, zoomSpeed));\n      dolly(tempVec2b.y);\n      dollyStart.copy(tempVec2a);\n    }\n\n    if (enablePan) {\n      let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n      let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n      handleMovePan(x, y);\n    }\n  }\n\n  const onMouseDown = e => {\n    if (!this.enabled) return;\n\n    switch (e.button) {\n      case this.mouseButtons.ORBIT:\n        if (enableRotate === false) return;\n        rotateStart.set(e.clientX, e.clientY);\n        state = STATE.ROTATE;\n        break;\n\n      case this.mouseButtons.ZOOM:\n        if (enableZoom === false) return;\n        dollyStart.set(e.clientX, e.clientY);\n        state = STATE.DOLLY;\n        break;\n\n      case this.mouseButtons.PAN:\n        if (enablePan === false) return;\n        panStart.set(e.clientX, e.clientY);\n        state = STATE.PAN;\n        break;\n    }\n\n    if (state !== STATE.NONE) {\n      window.addEventListener('mousemove', onMouseMove, false);\n      window.addEventListener('mouseup', onMouseUp, false);\n    }\n  };\n\n  const onMouseMove = e => {\n    if (!this.enabled) return;\n\n    switch (state) {\n      case STATE.ROTATE:\n        if (enableRotate === false) return;\n        handleMoveRotate(e.clientX, e.clientY);\n        break;\n\n      case STATE.DOLLY:\n        if (enableZoom === false) return;\n        handleMouseMoveDolly(e);\n        break;\n\n      case STATE.PAN:\n        if (enablePan === false) return;\n        handleMovePan(e.clientX, e.clientY);\n        break;\n    }\n  };\n\n  const onMouseUp = () => {\n    window.removeEventListener('mousemove', onMouseMove, false);\n    window.removeEventListener('mouseup', onMouseUp, false);\n    state = STATE.NONE;\n  };\n\n  const onMouseWheel = e => {\n    if (!this.enabled || !enableZoom || state !== STATE.NONE && state !== STATE.ROTATE) return;\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (e.deltaY < 0) {\n      dolly(1 / getZoomScale());\n    } else if (e.deltaY > 0) {\n      dolly(getZoomScale());\n    }\n  };\n\n  const onTouchStart = e => {\n    if (!this.enabled) return;\n    e.preventDefault();\n\n    switch (e.touches.length) {\n      case 1:\n        if (enableRotate === false) return;\n        rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);\n        state = STATE.ROTATE;\n        break;\n\n      case 2:\n        if (enableZoom === false && enablePan === false) return;\n        handleTouchStartDollyPan(e);\n        state = STATE.DOLLY_PAN;\n        break;\n\n      default:\n        state = STATE.NONE;\n    }\n  };\n\n  const onTouchMove = e => {\n    if (!this.enabled) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    switch (e.touches.length) {\n      case 1:\n        if (enableRotate === false) return;\n        handleMoveRotate(e.touches[0].pageX, e.touches[0].pageY);\n        break;\n\n      case 2:\n        if (enableZoom === false && enablePan === false) return;\n        handleTouchMoveDollyPan(e);\n        break;\n\n      default:\n        state = STATE.NONE;\n    }\n  };\n\n  const onTouchEnd = () => {\n    if (!this.enabled) return;\n    state = STATE.NONE;\n  };\n\n  const onContextMenu = e => {\n    if (!this.enabled) return;\n    e.preventDefault();\n  };\n\n  function addHandlers() {\n    element.addEventListener('contextmenu', onContextMenu, false);\n    element.addEventListener('mousedown', onMouseDown, false);\n    element.addEventListener('wheel', onMouseWheel, {\n      passive: false\n    });\n    element.addEventListener('touchstart', onTouchStart, {\n      passive: false\n    });\n    element.addEventListener('touchend', onTouchEnd, false);\n    element.addEventListener('touchmove', onTouchMove, {\n      passive: false\n    });\n  }\n\n  this.remove = function () {\n    element.removeEventListener('contextmenu', onContextMenu);\n    element.removeEventListener('mousedown', onMouseDown);\n    element.removeEventListener('wheel', onMouseWheel);\n    element.removeEventListener('touchstart', onTouchStart);\n    element.removeEventListener('touchend', onTouchEnd);\n    element.removeEventListener('touchmove', onTouchMove);\n    window.removeEventListener('mousemove', onMouseMove);\n    window.removeEventListener('mouseup', onMouseUp);\n  };\n\n  addHandlers();\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Raycast.js\n// TODO: add barycentric ?\n\n\nconst Raycast_tempVec3a = new Vec3_Vec3();\nconst Raycast_tempVec3b = new Vec3_Vec3();\nconst tempVec3c = new Vec3_Vec3();\nconst Raycast_tempMat4 = new Mat4_Mat4();\nclass Raycast_Raycast {\n  constructor(gl) {\n    this.gl = gl;\n    this.origin = new Vec3_Vec3();\n    this.direction = new Vec3_Vec3();\n  } // Set ray from mouse unprojection\n\n\n  castMouse(camera, mouse = [0, 0]) {\n    if (camera.type === 'orthographic') {\n      // Set origin\n      // Since camera is orthographic, origin is not the camera position\n      const {\n        left,\n        right,\n        bottom,\n        top,\n        zoom\n      } = camera;\n      const x = left / zoom + (right - left) / zoom * (mouse[0] * 0.5 + 0.5);\n      const y = bottom / zoom + (top - bottom) / zoom * (mouse[1] * 0.5 + 0.5);\n      this.origin.set(x, y, 0);\n      this.origin.applyMatrix4(camera.worldMatrix); // Set direction\n      // https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2\n\n      this.direction.x = -camera.worldMatrix[8];\n      this.direction.y = -camera.worldMatrix[9];\n      this.direction.z = -camera.worldMatrix[10];\n    } else {\n      // Set origin\n      camera.worldMatrix.getTranslation(this.origin); // Set direction\n\n      this.direction.set(mouse[0], mouse[1], 0.5);\n      camera.unproject(this.direction);\n      this.direction.sub(this.origin).normalize();\n    }\n  }\n\n  intersectBounds(meshes) {\n    if (!Array.isArray(meshes)) meshes = [meshes];\n    const invWorldMat4 = Raycast_tempMat4;\n    const origin = Raycast_tempVec3a;\n    const direction = Raycast_tempVec3b;\n    const hits = [];\n    meshes.forEach(mesh => {\n      // Create bounds\n      if (!mesh.geometry.bounds) mesh.geometry.computeBoundingBox();\n      if (mesh.geometry.raycast === 'sphere' && mesh.geometry.bounds.radius === Infinity) mesh.geometry.computeBoundingSphere(); // Take world space ray and make it object space to align with bounding box\n\n      invWorldMat4.inverse(mesh.worldMatrix);\n      origin.copy(this.origin).applyMatrix4(invWorldMat4);\n      direction.copy(this.direction).transformDirection(invWorldMat4);\n      let localDistance = 0;\n\n      if (mesh.geometry.raycast === 'sphere') {\n        localDistance = this.intersectSphere(mesh.geometry.bounds, origin, direction);\n      } else {\n        localDistance = this.intersectBox(mesh.geometry.bounds, origin, direction);\n      }\n\n      if (!localDistance) return; // Create object on mesh to avoid generating lots of objects\n\n      if (!mesh.hit) mesh.hit = {\n        localPoint: new Vec3_Vec3(),\n        point: new Vec3_Vec3()\n      };\n      mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n      mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n      mesh.hit.distance = mesh.hit.point.distance(this.origin);\n      hits.push(mesh);\n    });\n    hits.sort((a, b) => a.hit.distance - b.hit.distance);\n    return hits;\n  }\n\n  intersectSphere(sphere, origin = this.origin, direction = this.direction) {\n    const ray = tempVec3c;\n    ray.sub(sphere.center, origin);\n    const tca = ray.dot(direction);\n    const d2 = ray.dot(ray) - tca * tca;\n    const radius2 = sphere.radius * sphere.radius;\n    if (d2 > radius2) return 0;\n    const thc = Math.sqrt(radius2 - d2);\n    const t0 = tca - thc;\n    const t1 = tca + thc;\n    if (t0 < 0 && t1 < 0) return 0;\n    if (t0 < 0) return t1;\n    return t0;\n  } // Ray AABB - Ray Axis aligned bounding box testing\n\n\n  intersectBox(box, origin = this.origin, direction = this.direction) {\n    let tmin, tmax, tYmin, tYmax, tZmin, tZmax;\n    const invdirx = 1 / direction.x;\n    const invdiry = 1 / direction.y;\n    const invdirz = 1 / direction.z;\n    const min = box.min;\n    const max = box.max;\n    tmin = ((invdirx >= 0 ? min.x : max.x) - origin.x) * invdirx;\n    tmax = ((invdirx >= 0 ? max.x : min.x) - origin.x) * invdirx;\n    tYmin = ((invdiry >= 0 ? min.y : max.y) - origin.y) * invdiry;\n    tYmax = ((invdiry >= 0 ? max.y : min.y) - origin.y) * invdiry;\n    if (tmin > tYmax || tYmin > tmax) return 0;\n    if (tYmin > tmin) tmin = tYmin;\n    if (tYmax < tmax) tmax = tYmax;\n    tZmin = ((invdirz >= 0 ? min.z : max.z) - origin.z) * invdirz;\n    tZmax = ((invdirz >= 0 ? max.z : min.z) - origin.z) * invdirz;\n    if (tmin > tZmax || tZmin > tmax) return 0;\n    if (tZmin > tmin) tmin = tZmin;\n    if (tZmax < tmax) tmax = tZmax;\n    if (tmax < 0) return 0;\n    return tmin >= 0 ? tmin : tmax;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Curve.js\n\nconst CATMULLROM = 'catmullrom';\nconst CUBICBEZIER = 'cubicbezier';\nconst QUADRATICBEZIER = 'quadraticbezier'; // temp\n\nconst _a0 = new Vec3_Vec3(),\n      _a1 = new Vec3_Vec3(),\n      _a2 = new Vec3_Vec3(),\n      _a3 = new Vec3_Vec3();\n/**\n * Get the control points of cubic bezier curve.\n * @param {*} i\n * @param {*} a\n * @param {*} b\n */\n\n\nfunction getCtrlPoint(points, i, a = 0.168, b = 0.168) {\n  if (i < 1) {\n    _a0.sub(points[1], points[0]).scale(a).add(points[0]);\n  } else {\n    _a0.sub(points[i + 1], points[i - 1]).scale(a).add(points[i]);\n  }\n\n  if (i > points.length - 3) {\n    const last = points.length - 1;\n\n    _a1.sub(points[last - 1], points[last]).scale(b).add(points[last]);\n  } else {\n    _a1.sub(points[i], points[i + 2]).scale(b).add(points[i + 1]);\n  }\n\n  return [_a0.clone(), _a1.clone()];\n}\n\nfunction getQuadraticBezierPoint(t, p0, c0, p1) {\n  const k = 1 - t;\n\n  _a0.copy(p0).scale(k ** 2);\n\n  _a1.copy(c0).scale(2 * k * t);\n\n  _a2.copy(p1).scale(t ** 2);\n\n  const ret = new Vec3_Vec3();\n  ret.add(_a0, _a1).add(_a2);\n  return ret;\n}\n\nfunction getCubicBezierPoint(t, p0, c0, c1, p1) {\n  const k = 1 - t;\n\n  _a0.copy(p0).scale(k ** 3);\n\n  _a1.copy(c0).scale(3 * k ** 2 * t);\n\n  _a2.copy(c1).scale(3 * k * t ** 2);\n\n  _a3.copy(p1).scale(t ** 3);\n\n  const ret = new Vec3_Vec3();\n  ret.add(_a0, _a1).add(_a2).add(_a3);\n  return ret;\n}\n\nclass Curve_Curve {\n  constructor({\n    points = [new Vec3_Vec3(0, 0, 0), new Vec3_Vec3(0, 1, 0), new Vec3_Vec3(1, 1, 0), new Vec3_Vec3(1, 0, 0)],\n    divisions = 12,\n    type = CATMULLROM\n  } = {}) {\n    this.points = points;\n    this.divisions = divisions;\n    this.type = type;\n  }\n\n  _getQuadraticBezierPoints(divisions = this.divisions) {\n    const points = [];\n    const count = this.points.length;\n\n    if (count < 3) {\n      console.warn('Not enough points provided.');\n      return [];\n    }\n\n    const p0 = this.points[0];\n    let c0 = this.points[1],\n        p1 = this.points[2];\n\n    for (let i = 0; i <= divisions; i++) {\n      const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n      points.push(p);\n    }\n\n    let offset = 3;\n\n    while (count - offset > 0) {\n      p0.copy(p1);\n      c0 = p1.scale(2).sub(c0);\n      p1 = this.points[offset];\n\n      for (let i = 1; i <= divisions; i++) {\n        const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n        points.push(p);\n      }\n\n      offset++;\n    }\n\n    return points;\n  }\n\n  _getCubicBezierPoints(divisions = this.divisions) {\n    const points = [];\n    const count = this.points.length;\n\n    if (count < 4) {\n      console.warn('Not enough points provided.');\n      return [];\n    }\n\n    let p0 = this.points[0],\n        c0 = this.points[1],\n        c1 = this.points[2],\n        p1 = this.points[3];\n\n    for (let i = 0; i <= divisions; i++) {\n      const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n      points.push(p);\n    }\n\n    let offset = 4;\n\n    while (count - offset > 1) {\n      p0.copy(p1);\n      c0 = p1.scale(2).sub(c1);\n      c1 = this.points[offset];\n      p1 = this.points[offset + 1];\n\n      for (let i = 1; i <= divisions; i++) {\n        const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n        points.push(p);\n      }\n\n      offset += 2;\n    }\n\n    return points;\n  }\n\n  _getCatmullRomPoints(divisions = this.divisions, a = 0.168, b = 0.168) {\n    const points = [];\n    const count = this.points.length;\n\n    if (count <= 2) {\n      return this.points;\n    }\n\n    let p0;\n    this.points.forEach((p, i) => {\n      if (i === 0) {\n        p0 = p;\n      } else {\n        const [c0, c1] = getCtrlPoint(this.points, i - 1, a, b);\n        const c = new Curve_Curve({\n          points: [p0, c0, c1, p],\n          type: CUBICBEZIER\n        });\n        points.pop();\n        points.push(...c.getPoints(divisions));\n        p0 = p;\n      }\n    });\n    return points;\n  }\n\n  getPoints(divisions = this.divisions, a = 0.168, b = 0.168) {\n    const type = this.type;\n\n    if (type === QUADRATICBEZIER) {\n      return this._getQuadraticBezierPoints(divisions);\n    }\n\n    if (type === CUBICBEZIER) {\n      return this._getCubicBezierPoints(divisions);\n    }\n\n    if (type === CATMULLROM) {\n      return this._getCatmullRomPoints(divisions, a, b);\n    }\n\n    return this.points;\n  }\n\n}\nCurve_Curve.CATMULLROM = CATMULLROM;\nCurve_Curve.CUBICBEZIER = CUBICBEZIER;\nCurve_Curve.QUADRATICBEZIER = QUADRATICBEZIER;\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Post.js\n// TODO: Destroy render targets if size changed and exists\n\n\n\n\nclass Post_Post {\n  constructor(gl, {\n    width,\n    height,\n    dpr,\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    minFilter = gl.LINEAR,\n    magFilter = gl.LINEAR,\n    geometry = new Triangle_Triangle(gl),\n    targetOnly = null\n  } = {}) {\n    this.gl = gl;\n    this.options = {\n      wrapS,\n      wrapT,\n      minFilter,\n      magFilter\n    };\n    this.passes = [];\n    this.geometry = geometry;\n    this.uniform = {\n      value: null\n    };\n    this.targetOnly = targetOnly;\n    const fbo = this.fbo = {\n      read: null,\n      write: null,\n      swap: () => {\n        let temp = fbo.read;\n        fbo.read = fbo.write;\n        fbo.write = temp;\n      }\n    };\n    this.resize({\n      width,\n      height,\n      dpr\n    });\n  }\n\n  addPass({\n    vertex = defaultVertex,\n    fragment = defaultFragment,\n    uniforms = {},\n    textureUniform = 'tMap',\n    enabled = true\n  } = {}) {\n    uniforms[textureUniform] = {\n      value: this.fbo.read.texture\n    };\n    const program = new Program(this.gl, {\n      vertex,\n      fragment,\n      uniforms\n    });\n    const mesh = new Mesh_Mesh(this.gl, {\n      geometry: this.geometry,\n      program\n    });\n    const pass = {\n      mesh,\n      program,\n      uniforms,\n      enabled,\n      textureUniform\n    };\n    this.passes.push(pass);\n    return pass;\n  }\n\n  resize({\n    width,\n    height,\n    dpr\n  } = {}) {\n    if (dpr) this.dpr = dpr;\n\n    if (width) {\n      this.width = width;\n      this.height = height || width;\n    }\n\n    dpr = this.dpr || this.gl.renderer.dpr;\n    width = (this.width || this.gl.renderer.width) * dpr;\n    height = (this.height || this.gl.renderer.height) * dpr;\n    this.options.width = width;\n    this.options.height = height;\n    this.fbo.read = new RenderTarget_RenderTarget(this.gl, this.options);\n    this.fbo.write = new RenderTarget_RenderTarget(this.gl, this.options);\n  } // Uses same arguments as renderer.render\n\n\n  render({\n    scene,\n    camera,\n    target = null,\n    update = true,\n    sort = true,\n    frustumCull = true\n  }) {\n    const enabledPasses = this.passes.filter(pass => pass.enabled);\n    this.gl.renderer.render({\n      scene,\n      camera,\n      target: enabledPasses.length || !target && this.targetOnly ? this.fbo.write : target,\n      update,\n      sort,\n      frustumCull\n    });\n    this.fbo.swap();\n    enabledPasses.forEach((pass, i) => {\n      pass.mesh.program.uniforms[pass.textureUniform].value = this.fbo.read.texture;\n      this.gl.renderer.render({\n        scene: pass.mesh,\n        target: i === enabledPasses.length - 1 && (target || !this.targetOnly) ? target : this.fbo.write,\n        clear: true\n      });\n      this.fbo.swap();\n    });\n    this.uniform.value = this.fbo.read.texture;\n  }\n\n}\nconst defaultVertex =\n/* glsl */\n`\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\nconst defaultFragment =\n/* glsl */\n`\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n`;\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Animation.js\n\n\nconst prevPos = new Vec3_Vec3();\nconst prevRot = new Quat_Quat();\nconst prevScl = new Vec3_Vec3();\nconst nextPos = new Vec3_Vec3();\nconst nextRot = new Quat_Quat();\nconst nextScl = new Vec3_Vec3();\nclass Animation {\n  constructor({\n    objects,\n    data\n  }) {\n    this.objects = objects;\n    this.data = data;\n    this.elapsed = 0;\n    this.weight = 1;\n    this.duration = data.frames.length - 1;\n  }\n\n  update(totalWeight = 1, isSet) {\n    const weight = isSet ? 1 : this.weight / totalWeight;\n    const elapsed = this.elapsed % this.duration;\n    const floorFrame = Math.floor(elapsed);\n    const blend = elapsed - floorFrame;\n    const prevKey = this.data.frames[floorFrame];\n    const nextKey = this.data.frames[(floorFrame + 1) % this.duration];\n    this.objects.forEach((object, i) => {\n      prevPos.fromArray(prevKey.position, i * 3);\n      prevRot.fromArray(prevKey.quaternion, i * 4);\n      prevScl.fromArray(prevKey.scale, i * 3);\n      nextPos.fromArray(nextKey.position, i * 3);\n      nextRot.fromArray(nextKey.quaternion, i * 4);\n      nextScl.fromArray(nextKey.scale, i * 3);\n      prevPos.lerp(nextPos, blend);\n      prevRot.slerp(nextRot, blend);\n      prevScl.lerp(nextScl, blend);\n      object.position.lerp(prevPos, weight);\n      object.quaternion.slerp(prevRot, weight);\n      object.scale.lerp(prevScl, weight);\n    });\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Skin.js\n\n\n\n\n\nconst Skin_tempMat4 = new Mat4_Mat4();\nclass Skin_Skin extends Mesh_Mesh {\n  constructor(gl, {\n    rig,\n    geometry,\n    program,\n    mode = gl.TRIANGLES\n  } = {}) {\n    super(gl, {\n      geometry,\n      program,\n      mode\n    });\n    this.createBones(rig);\n    this.createBoneTexture();\n    this.animations = [];\n    Object.assign(this.program.uniforms, {\n      boneTexture: {\n        value: this.boneTexture\n      },\n      boneTextureSize: {\n        value: this.boneTextureSize\n      }\n    });\n  }\n\n  createBones(rig) {\n    // Create root so that can simply update world matrix of whole skeleton\n    this.root = new Transform_Transform(); // Create bones\n\n    this.bones = [];\n    if (!rig.bones || !rig.bones.length) return;\n\n    for (let i = 0; i < rig.bones.length; i++) {\n      const bone = new Transform_Transform(); // Set initial values (bind pose)\n\n      bone.position.fromArray(rig.bindPose.position, i * 3);\n      bone.quaternion.fromArray(rig.bindPose.quaternion, i * 4);\n      bone.scale.fromArray(rig.bindPose.scale, i * 3);\n      this.bones.push(bone);\n    } // Once created, set the hierarchy\n\n\n    rig.bones.forEach((data, i) => {\n      this.bones[i].name = data.name;\n      if (data.parent === -1) return this.bones[i].setParent(this.root);\n      this.bones[i].setParent(this.bones[data.parent]);\n    }); // Then update to calculate world matrices\n\n    this.root.updateMatrixWorld(true); // Store inverse of bind pose to calculate differences\n\n    this.bones.forEach(bone => {\n      bone.bindInverse = new Mat4_Mat4(...bone.worldMatrix).inverse();\n    });\n  }\n\n  createBoneTexture() {\n    if (!this.bones.length) return;\n    const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.bones.length * 4)) / Math.LN2)));\n    this.boneMatrices = new Float32Array(size * size * 4);\n    this.boneTextureSize = size;\n    this.boneTexture = new Texture(this.gl, {\n      image: this.boneMatrices,\n      generateMipmaps: false,\n      type: this.gl.FLOAT,\n      internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA16F : this.gl.RGBA,\n      flipY: false,\n      width: size\n    });\n  }\n\n  addAnimation(data) {\n    const animation = new Animation({\n      objects: this.bones,\n      data\n    });\n    this.animations.push(animation);\n    return animation;\n  }\n\n  update() {\n    // Calculate combined animation weight\n    let total = 0;\n    this.animations.forEach(animation => total += animation.weight);\n    this.animations.forEach((animation, i) => {\n      // force first animation to set in order to reset frame\n      animation.update(total, i === 0);\n    });\n  }\n\n  draw({\n    camera\n  } = {}) {\n    // Update world matrices manually, as not part of scene graph\n    this.root.updateMatrixWorld(true); // Update bone texture\n\n    this.bones.forEach((bone, i) => {\n      // Find difference between current and bind pose\n      Skin_tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n      this.boneMatrices.set(Skin_tempMat4, i * 16);\n    });\n    if (this.boneTexture) this.boneTexture.needsUpdate = true;\n    super.draw({\n      camera\n    });\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Text.js\nfunction Text({\n  font,\n  text,\n  width = Infinity,\n  align = 'left',\n  size = 1,\n  letterSpacing = 0,\n  lineHeight = 1.4,\n  wordSpacing = 0,\n  wordBreak = false\n}) {\n  const _this = this;\n\n  let glyphs, buffers;\n  let fontHeight, baseline, scale;\n  const newline = /\\n/;\n  const whitespace = /\\s/;\n  {\n    parseFont();\n    createGeometry();\n  }\n\n  function parseFont() {\n    glyphs = {};\n    font.chars.forEach(d => glyphs[d.char] = d);\n  }\n\n  function createGeometry() {\n    fontHeight = font.common.lineHeight;\n    baseline = font.common.base; // Use baseline so that actual text height is as close to 'size' value as possible\n\n    scale = size / baseline; // Strip spaces and newlines to get actual character length for buffers\n\n    let chars = text.replace(/[ \\n]/g, '');\n    let numChars = chars.length; // Create output buffers\n\n    buffers = {\n      position: new Float32Array(numChars * 4 * 3),\n      uv: new Float32Array(numChars * 4 * 2),\n      id: new Float32Array(numChars * 4),\n      index: new Uint16Array(numChars * 6)\n    }; // Set values for buffers that don't require calculation\n\n    for (let i = 0; i < numChars; i++) {\n      buffers.id[i] = i;\n      buffers.index.set([i * 4, i * 4 + 2, i * 4 + 1, i * 4 + 1, i * 4 + 2, i * 4 + 3], i * 6);\n    }\n\n    layout();\n  }\n\n  function layout() {\n    const lines = [];\n    let cursor = 0;\n    let wordCursor = 0;\n    let wordWidth = 0;\n    let line = newLine();\n\n    function newLine() {\n      const line = {\n        width: 0,\n        glyphs: []\n      };\n      lines.push(line);\n      wordCursor = cursor;\n      wordWidth = 0;\n      return line;\n    }\n\n    let maxTimes = 100;\n    let count = 0;\n\n    while (cursor < text.length && count < maxTimes) {\n      count++;\n      const char = text[cursor]; // Skip whitespace at start of line\n\n      if (!line.width && whitespace.test(char)) {\n        cursor++;\n        wordCursor = cursor;\n        wordWidth = 0;\n        continue;\n      } // If newline char, skip to next line\n\n\n      if (newline.test(char)) {\n        cursor++;\n        line = newLine();\n        continue;\n      }\n\n      const glyph = glyphs[char]; // Find any applicable kern pairs\n\n      if (line.glyphs.length) {\n        const prevGlyph = line.glyphs[line.glyphs.length - 1][0];\n        let kern = getKernPairOffset(glyph.id, prevGlyph.id) * scale;\n        line.width += kern;\n        wordWidth += kern;\n      } // add char to line\n\n\n      line.glyphs.push([glyph, line.width]); // calculate advance for next glyph\n\n      let advance = 0; // If whitespace, update location of current word for line breaks\n\n      if (whitespace.test(char)) {\n        wordCursor = cursor;\n        wordWidth = 0; // Add wordspacing\n\n        advance += wordSpacing * size;\n      } else {\n        // Add letterspacing\n        advance += letterSpacing * size;\n      }\n\n      advance += glyph.xadvance * scale;\n      line.width += advance;\n      wordWidth += advance; // If width defined\n\n      if (line.width > width) {\n        // If can break words, undo latest glyph if line not empty and create new line\n        if (wordBreak && line.glyphs.length > 1) {\n          line.width -= advance;\n          line.glyphs.pop();\n          line = newLine();\n          continue; // If not first word, undo current word and cursor and create new line\n        } else if (!wordBreak && wordWidth !== line.width) {\n          let numGlyphs = cursor - wordCursor + 1;\n          line.glyphs.splice(-numGlyphs, numGlyphs);\n          cursor = wordCursor;\n          line.width -= wordWidth;\n          line = newLine();\n          continue;\n        }\n      }\n\n      cursor++;\n    } // Remove last line if empty\n\n\n    if (!line.width) lines.pop();\n    populateBuffers(lines);\n  }\n\n  function populateBuffers(lines) {\n    const texW = font.common.scaleW;\n    const texH = font.common.scaleH; // For all fonts tested, a little offset was needed to be right on the baseline, hence 0.07.\n\n    let y = 0.07 * size;\n    let j = 0;\n\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n      let line = lines[lineIndex];\n\n      for (let i = 0; i < line.glyphs.length; i++) {\n        const glyph = line.glyphs[i][0];\n        let x = line.glyphs[i][1];\n\n        if (align === 'center') {\n          x -= line.width * 0.5;\n        } else if (align === 'right') {\n          x -= line.width;\n        } // If space, don't add to geometry\n\n\n        if (whitespace.test(glyph.char)) continue; // Apply char sprite offsets\n\n        x += glyph.xoffset * scale;\n        y -= glyph.yoffset * scale; // each letter is a quad. axis bottom left\n\n        let w = glyph.width * scale;\n        let h = glyph.height * scale;\n        buffers.position.set([x, y - h, 0, x, y, 0, x + w, y - h, 0, x + w, y, 0], j * 4 * 3);\n        let u = glyph.x / texW;\n        let uw = glyph.width / texW;\n        let v = 1.0 - glyph.y / texH;\n        let vh = glyph.height / texH;\n        buffers.uv.set([u, v - vh, u, v, u + uw, v - vh, u + uw, v], j * 4 * 2); // Reset cursor to baseline\n\n        y += glyph.yoffset * scale;\n        j++;\n      }\n\n      y -= size * lineHeight;\n    }\n\n    _this.buffers = buffers;\n    _this.numLines = lines.length;\n    _this.height = _this.numLines * size * lineHeight;\n  }\n\n  function getKernPairOffset(id1, id2) {\n    for (let i = 0; i < font.kernings.length; i++) {\n      let k = font.kernings[i];\n      if (k.first < id1) continue;\n      if (k.second < id2) continue;\n      if (k.first > id1) return 0;\n      if (k.first === id1 && k.second > id2) return 0;\n      return k.amount;\n    }\n\n    return 0;\n  } // Update buffers to layout with new layout\n\n\n  this.resize = function (options) {\n    ({\n      width\n    } = options);\n    layout();\n  }; // Completely change text (like creating new Text)\n\n\n  this.update = function (options) {\n    ({\n      text\n    } = options);\n    createGeometry();\n  };\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/NormalProgram.js\n\nconst NormalProgram_vertex =\n/* glsl */\n`\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec3 normal;\n\n    uniform mat3 normalMatrix;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vNormal;\n\n    void main() {\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\nconst NormalProgram_fragment =\n/* glsl */\n`\n    precision highp float;\n    precision highp int;\n\n    varying vec3 vNormal;\n\n    void main() {\n        gl_FragColor.rgb = normalize(vNormal);\n        gl_FragColor.a = 1.0;\n    }\n`;\nfunction NormalProgram(gl) {\n  return new Program(gl, {\n    vertex: NormalProgram_vertex,\n    fragment: NormalProgram_fragment,\n    cullFace: null\n  });\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Flowmap.js\n\n\n\n\n\nclass Flowmap_Flowmap {\n  constructor(gl, {\n    size = 128,\n    // default size of the render targets\n    falloff = 0.3,\n    // size of the stamp, percentage of the size\n    alpha = 1,\n    // opacity of the stamp\n    dissipation = 0.98,\n    // affects the speed that the stamp fades. Closer to 1 is slower\n    type // Pass in gl.FLOAT to force it, defaults to gl.HALF_FLOAT\n\n  } = {}) {\n    const _this = this;\n\n    this.gl = gl; // output uniform containing render target textures\n\n    this.uniform = {\n      value: null\n    };\n    this.mask = {\n      read: null,\n      write: null,\n      // Helper function to ping pong the render targets and update the uniform\n      swap: () => {\n        let temp = _this.mask.read;\n        _this.mask.read = _this.mask.write;\n        _this.mask.write = temp;\n        _this.uniform.value = _this.mask.read.texture;\n      }\n    };\n    {\n      createFBOs();\n      this.aspect = 1;\n      this.mouse = new Vec2_Vec2();\n      this.velocity = new Vec2_Vec2();\n      this.mesh = initProgram();\n    }\n\n    function createFBOs() {\n      // Requested type not supported, fall back to half float\n      if (!type) type = gl.HALF_FLOAT || gl.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES;\n\n      let minFilter = (() => {\n        if (gl.renderer.isWebgl2) return gl.LINEAR;\n        if (gl.renderer.extensions[`OES_texture_${type === gl.FLOAT ? '' : 'half_'}float_linear`]) return gl.LINEAR;\n        return gl.NEAREST;\n      })();\n\n      const options = {\n        width: size,\n        height: size,\n        type,\n        format: gl.RGBA,\n        internalFormat: gl.renderer.isWebgl2 ? type === gl.FLOAT ? gl.RGBA32F : gl.RGBA16F : gl.RGBA,\n        minFilter,\n        depth: false\n      };\n      _this.mask.read = new RenderTarget_RenderTarget(gl, options);\n      _this.mask.write = new RenderTarget_RenderTarget(gl, options);\n\n      _this.mask.swap();\n    }\n\n    function initProgram() {\n      return new Mesh_Mesh(gl, {\n        // Triangle that includes -1 to 1 range for 'position', and 0 to 1 range for 'uv'.\n        geometry: new Triangle_Triangle(gl),\n        program: new Program(gl, {\n          vertex: Flowmap_vertex,\n          fragment: Flowmap_fragment,\n          uniforms: {\n            tMap: _this.uniform,\n            uFalloff: {\n              value: falloff * 0.5\n            },\n            uAlpha: {\n              value: alpha\n            },\n            uDissipation: {\n              value: dissipation\n            },\n            // User needs to update these\n            uAspect: {\n              value: 1\n            },\n            uMouse: {\n              value: _this.mouse\n            },\n            uVelocity: {\n              value: _this.velocity\n            }\n          },\n          depthTest: false\n        })\n      });\n    }\n  }\n\n  update() {\n    this.mesh.program.uniforms.uAspect.value = this.aspect;\n    this.gl.renderer.render({\n      scene: this.mesh,\n      target: this.mask.write,\n      clear: false\n    });\n    this.mask.swap();\n  }\n\n}\nconst Flowmap_vertex =\n/* glsl */\n`\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\nconst Flowmap_fragment =\n/* glsl */\n`\n    precision highp float;\n\n    uniform sampler2D tMap;\n\n    uniform float uFalloff;\n    uniform float uAlpha;\n    uniform float uDissipation;\n    \n    uniform float uAspect;\n    uniform vec2 uMouse;\n    uniform vec2 uVelocity;\n\n    varying vec2 vUv;\n\n    void main() {\n        vec4 color = texture2D(tMap, vUv) * uDissipation;\n\n        vec2 cursor = vUv - uMouse;\n        cursor.x *= uAspect;\n\n        vec3 stamp = vec3(uVelocity * vec2(1, -1), 1.0 - pow(1.0 - min(1.0, length(uVelocity)), 3.0));\n        float falloff = smoothstep(uFalloff, 0.0, length(cursor)) * uAlpha;\n\n        color.rgb = mix(color.rgb, stamp, vec3(falloff));\n\n        gl_FragColor = color;\n    }\n`;\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/GPGPU.js\n\n\n\n\n\nclass GPGPU_GPGPU {\n  constructor(gl, {\n    // Always pass in array of vec4s (RGBA values within texture)\n    data = new Float32Array(16),\n    geometry = new Triangle_Triangle(gl),\n    type // Pass in gl.FLOAT to force it, defaults to gl.HALF_FLOAT\n\n  }) {\n    this.gl = gl;\n    const initialData = data;\n    this.passes = [];\n    this.geometry = geometry;\n    this.dataLength = initialData.length / 4; // Windows and iOS only like power of 2 textures\n    // Find smallest PO2 that fits data\n\n    this.size = Math.pow(2, Math.ceil(Math.log(Math.ceil(Math.sqrt(this.dataLength))) / Math.LN2)); // Create coords for output texture\n\n    this.coords = new Float32Array(this.dataLength * 2);\n\n    for (let i = 0; i < this.dataLength; i++) {\n      const x = i % this.size / this.size; // to add 0.5 to be center pixel ?\n\n      const y = Math.floor(i / this.size) / this.size;\n      this.coords.set([x, y], i * 2);\n    } // Use original data if already correct length of PO2 texture, else copy to new array of correct length\n\n\n    const floatArray = (() => {\n      if (initialData.length === this.size * this.size * 4) {\n        return initialData;\n      } else {\n        const a = new Float32Array(this.size * this.size * 4);\n        a.set(initialData);\n        return a;\n      }\n    })(); // Create output texture uniform using input float texture with initial data\n\n\n    this.uniform = {\n      value: new Texture(gl, {\n        image: floatArray,\n        target: gl.TEXTURE_2D,\n        type: gl.FLOAT,\n        format: gl.RGBA,\n        internalFormat: gl.renderer.isWebgl2 ? gl.RGBA32F : gl.RGBA,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        generateMipmaps: false,\n        minFilter: gl.NEAREST,\n        magFilter: gl.NEAREST,\n        width: this.size,\n        flipY: false\n      })\n    }; // Create FBOs\n\n    const options = {\n      width: this.size,\n      height: this.size,\n      type: type || gl.HALF_FLOAT || gl.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES,\n      format: gl.RGBA,\n      internalFormat: gl.renderer.isWebgl2 ? type === gl.FLOAT ? gl.RGBA32F : gl.RGBA16F : gl.RGBA,\n      minFilter: gl.NEAREST,\n      depth: false,\n      unpackAlignment: 1\n    };\n    this.fbo = {\n      read: new RenderTarget_RenderTarget(gl, options),\n      write: new RenderTarget_RenderTarget(gl, options),\n      swap: () => {\n        let temp = this.fbo.read;\n        this.fbo.read = this.fbo.write;\n        this.fbo.write = temp;\n        this.uniform.value = this.fbo.read.texture;\n      }\n    };\n  }\n\n  addPass({\n    vertex = GPGPU_defaultVertex,\n    fragment = GPGPU_defaultFragment,\n    uniforms = {},\n    textureUniform = 'tMap',\n    enabled = true\n  } = {}) {\n    uniforms[textureUniform] = this.uniform;\n    const program = new Program(this.gl, {\n      vertex,\n      fragment,\n      uniforms\n    });\n    const mesh = new Mesh_Mesh(this.gl, {\n      geometry: this.geometry,\n      program\n    });\n    const pass = {\n      mesh,\n      program,\n      uniforms,\n      enabled,\n      textureUniform\n    };\n    this.passes.push(pass);\n    return pass;\n  }\n\n  render() {\n    const enabledPasses = this.passes.filter(pass => pass.enabled);\n    enabledPasses.forEach((pass, i) => {\n      this.gl.renderer.render({\n        scene: pass.mesh,\n        target: this.fbo.write,\n        clear: false\n      });\n      this.fbo.swap();\n    });\n  }\n\n}\nconst GPGPU_defaultVertex =\n/* glsl */\n`\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\nconst GPGPU_defaultFragment =\n/* glsl */\n`\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n`;\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Polyline.js\n\n\n\n\n\n\nconst tmp = new Vec3_Vec3();\nclass Polyline_Polyline {\n  constructor(gl, {\n    points,\n    // Array of Vec3s\n    vertex = Polyline_defaultVertex,\n    fragment = Polyline_defaultFragment,\n    uniforms = {},\n    attributes = {} // For passing in custom attribs\n\n  }) {\n    this.gl = gl;\n    this.points = points;\n    this.count = points.length; // Create buffers\n\n    this.position = new Float32Array(this.count * 3 * 2);\n    this.prev = new Float32Array(this.count * 3 * 2);\n    this.next = new Float32Array(this.count * 3 * 2);\n    const side = new Float32Array(this.count * 1 * 2);\n    const uv = new Float32Array(this.count * 2 * 2);\n    const index = new Uint16Array((this.count - 1) * 3 * 2); // Set static buffers\n\n    for (let i = 0; i < this.count; i++) {\n      side.set([-1, 1], i * 2);\n      const v = i / (this.count - 1);\n      uv.set([0, v, 1, v], i * 4);\n      if (i === this.count - 1) continue;\n      const ind = i * 2;\n      index.set([ind + 0, ind + 1, ind + 2], (ind + 0) * 3);\n      index.set([ind + 2, ind + 1, ind + 3], (ind + 1) * 3);\n    }\n\n    const geometry = this.geometry = new Geometry_Geometry(gl, Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: this.position\n      },\n      prev: {\n        size: 3,\n        data: this.prev\n      },\n      next: {\n        size: 3,\n        data: this.next\n      },\n      side: {\n        size: 1,\n        data: side\n      },\n      uv: {\n        size: 2,\n        data: uv\n      },\n      index: {\n        size: 1,\n        data: index\n      }\n    })); // Populate dynamic buffers\n\n    this.updateGeometry();\n    if (!uniforms.uResolution) this.resolution = uniforms.uResolution = {\n      value: new Vec2_Vec2()\n    };\n    if (!uniforms.uDPR) this.dpr = uniforms.uDPR = {\n      value: 1\n    };\n    if (!uniforms.uThickness) this.thickness = uniforms.uThickness = {\n      value: 1\n    };\n    if (!uniforms.uColor) this.color = uniforms.uColor = {\n      value: new Color_Color('#000')\n    };\n    if (!uniforms.uMiter) this.miter = uniforms.uMiter = {\n      value: 1\n    }; // Set size uniforms' values\n\n    this.resize();\n    const program = this.program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms\n    });\n    this.mesh = new Mesh_Mesh(gl, {\n      geometry,\n      program\n    });\n  }\n\n  updateGeometry() {\n    this.points.forEach((p, i) => {\n      p.toArray(this.position, i * 3 * 2);\n      p.toArray(this.position, i * 3 * 2 + 3);\n\n      if (!i) {\n        // If first point, calculate prev using the distance to 2nd point\n        tmp.copy(p).sub(this.points[i + 1]).add(p);\n        tmp.toArray(this.prev, i * 3 * 2);\n        tmp.toArray(this.prev, i * 3 * 2 + 3);\n      } else {\n        p.toArray(this.next, (i - 1) * 3 * 2);\n        p.toArray(this.next, (i - 1) * 3 * 2 + 3);\n      }\n\n      if (i === this.points.length - 1) {\n        // If last point, calculate next using distance to 2nd last point\n        tmp.copy(p).sub(this.points[i - 1]).add(p);\n        tmp.toArray(this.next, i * 3 * 2);\n        tmp.toArray(this.next, i * 3 * 2 + 3);\n      } else {\n        p.toArray(this.prev, (i + 1) * 3 * 2);\n        p.toArray(this.prev, (i + 1) * 3 * 2 + 3);\n      }\n    });\n    this.geometry.attributes.position.needsUpdate = true;\n    this.geometry.attributes.prev.needsUpdate = true;\n    this.geometry.attributes.next.needsUpdate = true;\n  } // Only need to call if not handling resolution uniforms manually\n\n\n  resize() {\n    // Update automatic uniforms if not overridden\n    if (this.resolution) this.resolution.value.set(this.gl.canvas.width, this.gl.canvas.height);\n    if (this.dpr) this.dpr.value = this.gl.renderer.dpr;\n  }\n\n}\nconst Polyline_defaultVertex =\n/* glsl */\n`\n    precision highp float;\n\n    attribute vec3 position;\n    attribute vec3 next;\n    attribute vec3 prev;\n    attribute vec2 uv;\n    attribute float side;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform vec2 uResolution;\n    uniform float uDPR;\n    uniform float uThickness;\n    uniform float uMiter;\n\n    varying vec2 vUv;\n\n    vec4 getPosition() {\n        mat4 mvp = projectionMatrix * modelViewMatrix;\n        vec4 current = mvp * vec4(position, 1);\n        vec4 nextPos = mvp * vec4(next, 1);\n        vec4 prevPos = mvp * vec4(prev, 1);\n\n        vec2 aspect = vec2(uResolution.x / uResolution.y, 1);    \n        vec2 currentScreen = current.xy / current.w * aspect;\n        vec2 nextScreen = nextPos.xy / nextPos.w * aspect;\n        vec2 prevScreen = prevPos.xy / prevPos.w * aspect;\n    \n        vec2 dir1 = normalize(currentScreen - prevScreen);\n        vec2 dir2 = normalize(nextScreen - currentScreen);\n        vec2 dir = normalize(dir1 + dir2);\n    \n        vec2 normal = vec2(-dir.y, dir.x);\n        normal /= mix(1.0, max(0.3, dot(normal, vec2(-dir1.y, dir1.x))), uMiter);\n        normal /= aspect;\n\n        float pixelWidthRatio = 1.0 / (uResolution.y / uDPR);\n        float pixelWidth = current.w * pixelWidthRatio;\n        normal *= pixelWidth * uThickness;\n        current.xy -= normal * side;\n    \n        return current;\n    }\n\n    void main() {\n        vUv = uv;\n        gl_Position = getPosition();\n    }\n`;\nconst Polyline_defaultFragment =\n/* glsl */\n`\n    precision highp float;\n\n    uniform vec3 uColor;\n    \n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor.rgb = uColor;\n        gl_FragColor.a = 1.0;\n    }\n`;\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/Shadow.js\n\n\n\nclass Shadow_Shadow {\n  constructor(gl, {\n    light = new Camera_Camera(gl),\n    width = 1024,\n    height = width\n  }) {\n    this.gl = gl;\n    this.light = light;\n    this.target = new RenderTarget_RenderTarget(gl, {\n      width,\n      height\n    });\n    this.depthProgram = new Program(gl, {\n      vertex: Shadow_defaultVertex,\n      fragment: Shadow_defaultFragment,\n      cullFace: null\n    });\n    this.castMeshes = [];\n  }\n\n  add({\n    mesh,\n    receive = true,\n    cast = true,\n    vertex = Shadow_defaultVertex,\n    fragment = Shadow_defaultFragment,\n    uniformProjection = 'shadowProjectionMatrix',\n    uniformView = 'shadowViewMatrix',\n    uniformTexture = 'tShadow'\n  }) {\n    // Add uniforms to existing program\n    if (receive && !mesh.program.uniforms[uniformProjection]) {\n      mesh.program.uniforms[uniformProjection] = {\n        value: this.light.projectionMatrix\n      };\n      mesh.program.uniforms[uniformView] = {\n        value: this.light.viewMatrix\n      };\n      mesh.program.uniforms[uniformTexture] = {\n        value: this.target.texture\n      };\n    }\n\n    if (!cast) return;\n    this.castMeshes.push(mesh); // Store program for when switching between depth override\n\n    mesh.colorProgram = mesh.program; // Check if depth program already attached\n\n    if (mesh.depthProgram) return; // Use global depth override if nothing custom passed in\n\n    if (vertex === Shadow_defaultVertex && fragment === Shadow_defaultFragment) {\n      mesh.depthProgram = this.depthProgram;\n      return;\n    } // Create custom override program\n\n\n    mesh.depthProgram = new Program(gl, {\n      vertex,\n      fragment,\n      cullFace: null\n    });\n  }\n\n  render({\n    scene\n  }) {\n    // For depth render, replace program with depth override.\n    // Hide meshes not casting shadows.\n    scene.traverse(node => {\n      if (!node.draw) return;\n\n      if (!!~this.castMeshes.indexOf(node)) {\n        node.program = node.depthProgram;\n      } else {\n        node.isForceVisibility = node.visible;\n        node.visible = false;\n      }\n    }); // Render the depth shadow map using the light as the camera\n\n    this.gl.renderer.render({\n      scene,\n      camera: this.light,\n      target: this.target\n    }); // Then switch the program back to the normal one\n\n    scene.traverse(node => {\n      if (!node.draw) return;\n\n      if (!!~this.castMeshes.indexOf(node)) {\n        node.program = node.colorProgram;\n      } else {\n        node.visible = node.isForceVisibility;\n      }\n    });\n  }\n\n}\nconst Shadow_defaultVertex =\n/* glsl */\n`\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\nconst Shadow_defaultFragment =\n/* glsl */\n`\n    precision highp float;\n\n    vec4 packRGBA (float v) {\n        vec4 pack = fract(vec4(1.0, 255.0, 65025.0, 16581375.0) * v);\n        pack -= pack.yzww * vec2(1.0 / 255.0, 0.0).xxxy;\n        return pack;\n    }\n\n    void main() {\n        gl_FragColor = packRGBA(gl_FragCoord.z);\n    }\n`;\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/KTXTexture.js\n // TODO: Support cubemaps\n// Generate textures using https://github.com/TimvanScherpenzeel/texture-compressor\n\nclass KTXTexture_KTXTexture extends Texture {\n  constructor(gl, {\n    buffer,\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    anisotropy = 0\n  } = {}) {\n    super(gl, {\n      generateMipmaps: false,\n      wrapS,\n      wrapT,\n      anisotropy\n    });\n    if (buffer) return this.parseBuffer(buffer);\n  }\n\n  parseBuffer(buffer) {\n    const ktx = new KhronosTextureContainer(buffer);\n    ktx.mipmaps.isCompressedTexture = true; // Update texture\n\n    this.image = ktx.mipmaps;\n    this.internalFormat = ktx.glInternalFormat;\n    this.minFilter = ktx.numberOfMipmapLevels > 1 ? this.gl.NEAREST_MIPMAP_LINEAR : this.gl.LINEAR; // TODO: support cube maps\n    // ktx.numberOfFaces\n  }\n\n}\n\nfunction KhronosTextureContainer(buffer) {\n  const idCheck = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x31, 0x31, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\n  const id = new Uint8Array(buffer, 0, 12);\n\n  for (let i = 0; i < id.length; i++) if (id[i] !== idCheck[i]) return console.error('File missing KTX identifier'); // TODO: Is this always 4? Tested: [android, macos]\n\n\n  const size = Uint32Array.BYTES_PER_ELEMENT;\n  const head = new DataView(buffer, 12, 13 * size);\n  const littleEndian = head.getUint32(0, true) === 0x04030201;\n  const glType = head.getUint32(1 * size, littleEndian);\n  if (glType !== 0) return console.warn('only compressed formats currently supported');\n  this.glInternalFormat = head.getUint32(4 * size, littleEndian);\n  let width = head.getUint32(6 * size, littleEndian);\n  let height = head.getUint32(7 * size, littleEndian);\n  this.numberOfFaces = head.getUint32(10 * size, littleEndian);\n  this.numberOfMipmapLevels = Math.max(1, head.getUint32(11 * size, littleEndian));\n  const bytesOfKeyValueData = head.getUint32(12 * size, littleEndian);\n  this.mipmaps = [];\n  let offset = 12 + 13 * 4 + bytesOfKeyValueData;\n\n  for (let level = 0; level < this.numberOfMipmapLevels; level++) {\n    const levelSize = new Int32Array(buffer, offset, 1)[0]; // size per face, since not supporting array cubemaps\n\n    offset += 4; // levelSize field\n\n    for (let face = 0; face < this.numberOfFaces; face++) {\n      const data = new Uint8Array(buffer, offset, levelSize);\n      this.mipmaps.push({\n        data,\n        width,\n        height\n      });\n      offset += levelSize;\n      offset += 3 - (levelSize + 3) % 4; // add padding for odd sized image\n    }\n\n    width = width >> 1;\n    height = height >> 1;\n  }\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/TextureLoader.js\n\n // For compressed textures, generate using https://github.com/TimvanScherpenzeel/texture-compressor\n\nlet cache = {};\nconst supportedExtensions = [];\nclass TextureLoader_TextureLoader {\n  static load(gl, {\n    src,\n    // string or object of extension:src key-values\n    // {\n    //     pvrtc: '...ktx',\n    //     s3tc: '...ktx',\n    //     etc: '...ktx',\n    //     etc1: '...ktx',\n    //     astc: '...ktx',\n    //     webp: '...webp',\n    //     jpg: '...jpg',\n    //     png: '...png',\n    // }\n    // Only props relevant to KTXTexture\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    anisotropy = 0,\n    // For regular images\n    format = gl.RGBA,\n    internalFormat = format,\n    generateMipmaps = true,\n    minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n    magFilter = gl.LINEAR,\n    premultiplyAlpha = false,\n    unpackAlignment = 4,\n    flipY = true\n  } = {}) {\n    const support = this.getSupportedExtensions(gl);\n    let ext = 'none'; // If src is string, determine which format from the extension\n\n    if (typeof src === 'string') {\n      ext = src.split('.').pop().split('?')[0].toLowerCase();\n    } // If src is object, use supported extensions and provided list to choose best option\n    // Get first supported match, so put in order of preference\n\n\n    if (typeof src === 'object') {\n      for (const prop in src) {\n        if (support.includes(prop.toLowerCase())) {\n          ext = prop.toLowerCase();\n          src = src[prop];\n          break;\n        }\n      }\n    } // Stringify props\n\n\n    const cacheID = src + wrapS + wrapT + anisotropy + format + internalFormat + generateMipmaps + minFilter + magFilter + premultiplyAlpha + unpackAlignment + flipY + gl.renderer.id; // Check cache for existing texture\n\n    if (cache[cacheID]) return cache[cacheID];\n    let texture;\n\n    switch (ext) {\n      case 'ktx':\n      case 'pvrtc':\n      case 's3tc':\n      case 'etc':\n      case 'etc1':\n      case 'astc':\n        // Load compressed texture using KTX format\n        texture = new KTXTexture_KTXTexture(gl, {\n          src,\n          wrapS,\n          wrapT,\n          anisotropy\n        });\n        texture.loaded = this.loadKTX(src, texture);\n        break;\n\n      case 'webp':\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n        texture = new Texture(gl, {\n          wrapS,\n          wrapT,\n          anisotropy,\n          format,\n          internalFormat,\n          generateMipmaps,\n          minFilter,\n          magFilter,\n          premultiplyAlpha,\n          unpackAlignment,\n          flipY\n        });\n        texture.loaded = this.loadImage(gl, src, texture);\n        break;\n\n      default:\n        console.warn('No supported format supplied');\n        texture = new Texture(gl);\n    }\n\n    texture.ext = ext;\n    cache[cacheID] = texture;\n    return texture;\n  }\n\n  static getSupportedExtensions(gl) {\n    if (supportedExtensions.length) return supportedExtensions;\n    const extensions = {\n      pvrtc: gl.renderer.getExtension('WEBGL_compressed_texture_pvrtc') || gl.renderer.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n      s3tc: gl.renderer.getExtension('WEBGL_compressed_texture_s3tc') || gl.renderer.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.renderer.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc'),\n      etc: gl.renderer.getExtension('WEBGL_compressed_texture_etc'),\n      etc1: gl.renderer.getExtension('WEBGL_compressed_texture_etc1'),\n      astc: gl.renderer.getExtension('WEBGL_compressed_texture_astc')\n    };\n\n    for (const ext in extensions) if (extensions[ext]) supportedExtensions.push(ext); // Check for WebP support\n\n\n    if (detectWebP) supportedExtensions.push('webp'); // Formats supported by all\n\n    supportedExtensions.push('png', 'jpg');\n    return supportedExtensions;\n  }\n\n  static loadKTX(src, texture) {\n    return fetch(src).then(res => res.arrayBuffer()).then(buffer => texture.parseBuffer(buffer));\n  }\n\n  static loadImage(gl, src, texture) {\n    return decodeImage(src).then(imgBmp => {\n      // Catch non POT textures and update params to avoid errors\n      if (!powerOfTwo(imgBmp.width) || !powerOfTwo(imgBmp.height)) {\n        if (texture.generateMipmaps) texture.generateMipmaps = false;\n        if (texture.minFilter === gl.NEAREST_MIPMAP_LINEAR) texture.minFilter = gl.LINEAR;\n        if (texture.wrapS === gl.REPEAT) texture.wrapS = texture.wrapT = gl.CLAMP_TO_EDGE;\n      }\n\n      texture.image = imgBmp; // For createImageBitmap, close once uploaded\n\n      texture.onUpdate = () => {\n        if (imgBmp.close) imgBmp.close();\n        texture.onUpdate = null;\n      };\n    });\n  }\n\n  static clearCache() {\n    cache = {};\n  }\n\n}\n\nfunction detectWebP() {\n  return document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') == 0;\n}\n\nfunction powerOfTwo(value) {\n  return Math.log2(value) % 1 === 0;\n}\n\nfunction decodeImage(src) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.src = src; // Only chrome's implementation of createImageBitmap is fully supported\n\n    const isChrome = navigator.userAgent.toLowerCase().includes('chrome');\n\n    if (!!window.createImageBitmap && isChrome) {\n      img.onload = () => {\n        createImageBitmap(img, {\n          imageOrientation: 'flipY',\n          premultiplyAlpha: 'none'\n        }).then(imgBmp => {\n          resolve(imgBmp);\n        });\n      };\n    } else {\n      img.onload = () => resolve(img);\n    }\n  });\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/GLTFAnimation.js\n\n\nconst tmpVec3A = new Vec3_Vec3();\nconst tmpVec3B = new Vec3_Vec3();\nconst tmpVec3C = new Vec3_Vec3();\nconst tmpVec3D = new Vec3_Vec3();\nconst tmpQuatA = new Quat_Quat();\nconst tmpQuatB = new Quat_Quat();\nconst tmpQuatC = new Quat_Quat();\nconst tmpQuatD = new Quat_Quat();\nclass GLTFAnimation {\n  constructor(data, weight = 1) {\n    this.data = data;\n    this.elapsed = 0;\n    this.weight = weight; // Set to false to not apply modulo to elapsed against duration\n\n    this.loop = true; // Get duration from largest final time in all channels\n\n    this.duration = data.reduce((a, {\n      times\n    }) => Math.max(a, times[times.length - 1]), 0);\n  }\n\n  update(totalWeight = 1, isSet) {\n    const weight = isSet ? 1 : this.weight / totalWeight;\n    const elapsed = this.loop ? this.elapsed % this.duration : Math.min(this.elapsed, this.duration);\n    this.data.forEach(({\n      node,\n      transform,\n      interpolation,\n      times,\n      values\n    }) => {\n      // Get index of two time values elapsed is between\n      const prevIndex = Math.max(1, times.findIndex(t => t > elapsed)) - 1;\n      const nextIndex = prevIndex + 1; // Get linear blend/alpha between the two\n\n      let alpha = (elapsed - times[prevIndex]) / (times[nextIndex] - times[prevIndex]);\n      if (interpolation === 'STEP') alpha = 0;\n      let prevVal = tmpVec3A;\n      let prevTan = tmpVec3B;\n      let nextTan = tmpVec3C;\n      let nextVal = tmpVec3D;\n      let size = 3;\n\n      if (transform === 'quaternion') {\n        prevVal = tmpQuatA;\n        prevTan = tmpQuatB;\n        nextTan = tmpQuatC;\n        nextVal = tmpQuatD;\n        size = 4;\n      }\n\n      if (interpolation === 'CUBICSPLINE') {\n        // Get the prev and next values from the indices\n        prevVal.fromArray(values, prevIndex * size * 3 + size * 1);\n        prevTan.fromArray(values, prevIndex * size * 3 + size * 2);\n        nextTan.fromArray(values, nextIndex * size * 3 + size * 0);\n        nextVal.fromArray(values, nextIndex * size * 3 + size * 1); // interpolate for final value\n\n        prevVal = this.cubicSplineInterpolate(alpha, prevVal, prevTan, nextTan, nextVal);\n        if (size === 4) prevVal.normalize();\n      } else {\n        // Get the prev and next values from the indices\n        prevVal.fromArray(values, prevIndex * size);\n        nextVal.fromArray(values, nextIndex * size); // interpolate for final value\n\n        if (size === 4) prevVal.slerp(nextVal, alpha);else prevVal.lerp(nextVal, alpha);\n      } // interpolate between multiple possible animations\n\n\n      if (size === 4) node[transform].slerp(prevVal, weight);else node[transform].lerp(prevVal, weight);\n    });\n  }\n\n  cubicSplineInterpolate(t, prevVal, prevTan, nextTan, nextVal) {\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const s2 = 3 * t2 - 2 * t3;\n    const s3 = t3 - t2;\n    const s0 = 1 - s2;\n    const s1 = s3 - t2 + t;\n\n    for (let i = 0; i < prevVal.length; i++) {\n      prevVal[i] = s0 * prevVal[i] + s1 * (1 - t) * prevTan[i] + s2 * nextVal[i] + s3 * t * nextTan[i];\n    }\n\n    return prevVal;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/GLTFSkin.js\n\n\n\nconst GLTFSkin_tempMat4 = new Mat4_Mat4();\nclass GLTFSkin_GLTFSkin extends Mesh_Mesh {\n  constructor(gl, {\n    skeleton,\n    geometry,\n    program,\n    mode = gl.TRIANGLES\n  } = {}) {\n    super(gl, {\n      geometry,\n      program,\n      mode\n    });\n    this.skeleton = skeleton;\n    this.program = program;\n    this.createBoneTexture();\n    this.animations = [];\n  }\n\n  createBoneTexture() {\n    if (!this.skeleton.joints.length) return;\n    const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n    this.boneMatrices = new Float32Array(size * size * 4);\n    this.boneTextureSize = size;\n    this.boneTexture = new Texture(this.gl, {\n      image: this.boneMatrices,\n      generateMipmaps: false,\n      type: this.gl.FLOAT,\n      internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA16F : this.gl.RGBA,\n      flipY: false,\n      width: size\n    });\n  } // addAnimation(data) {\n  //     const animation = new Animation({ objects: this.bones, data });\n  //     this.animations.push(animation);\n  //     return animation;\n  // }\n  // updateAnimations() {\n  //     // Calculate combined animation weight\n  //     let total = 0;\n  //     this.animations.forEach((animation) => (total += animation.weight));\n  //     this.animations.forEach((animation, i) => {\n  //         // force first animation to set in order to reset frame\n  //         animation.update(total, i === 0);\n  //     });\n  // }\n\n\n  updateUniforms() {\n    // Update bone texture\n    this.skeleton.joints.forEach((bone, i) => {\n      // Find difference between current and bind pose\n      GLTFSkin_tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n      this.boneMatrices.set(GLTFSkin_tempMat4, i * 16);\n    });\n    if (this.boneTexture) this.boneTexture.needsUpdate = true;\n  }\n\n  draw({\n    camera\n  } = {}) {\n    if (!this.program.uniforms.boneTexture) {\n      Object.assign(this.program.uniforms, {\n        boneTexture: {\n          value: this.boneTexture\n        },\n        boneTextureSize: {\n          value: this.boneTextureSize\n        }\n      });\n    }\n\n    this.updateUniforms(); // Switch this world matrix with root node's to populate uniforms\n\n    const _worldMatrix = this.worldMatrix;\n    this.worldMatrix = this.skeleton.skeleton.worldMatrix;\n    super.draw({\n      camera\n    });\n    this.worldMatrix = _worldMatrix;\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/extras/GLTFLoader.js\n\n\n\n\n\n\n // Supports\n// [x] Geometry\n// [ ] Sparse support\n// [x] Nodes and Hierarchy\n// [ ] Morph Targets\n// [x] Skins\n// [ ] Materials\n// [ ] Textures\n// [x] Animation\n// [ ] Cameras\n// [ ] Extensions\n// TODO: Sparse accessor packing? For morph targets basically\n// TODO: init accessor missing bufferView with 0s\n// TODO: morph target animations\n\nconst TYPE_ARRAY = {\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\nconst TYPE_SIZE = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst ATTRIBUTES = {\n  POSITION: 'position',\n  NORMAL: 'normal',\n  TANGENT: 'tangent',\n  TEXCOORD_0: 'uv',\n  TEXCOORD_1: 'uv2',\n  COLOR_0: 'color',\n  WEIGHTS_0: 'skinWeight',\n  JOINTS_0: 'skinIndex'\n};\nconst TRANSFORMS = {\n  translation: 'position',\n  rotation: 'quaternion',\n  scale: 'scale'\n};\nclass GLTFLoader_GLTFLoader {\n  static async load(gl, src) {\n    const dir = src.split('/').slice(0, -1).join('/') + '/'; // load main description json\n\n    const desc = await fetch(src).then(res => res.json());\n    if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.'); // Load buffers async\n\n    const buffers = await this.loadBuffers(desc, dir); // Create gl buffers from bufferViews\n\n    const bufferViews = this.parseBufferViews(gl, desc, buffers); // Create geometries for each mesh primitive\n\n    const meshes = this.parseMeshes(gl, desc, bufferViews); // Fetch the inverse bind matrices for skeleton joints\n\n    const skins = this.parseSkins(gl, desc, bufferViews); // Create transforms, meshes and hierarchy\n\n    const nodes = this.parseNodes(gl, desc, meshes, skins); // Place nodes in skeletons\n\n    this.populateSkins(skins, nodes); // Create animation handlers\n\n    const animations = this.parseAnimations(gl, desc, nodes, bufferViews); // Get top level nodes for each scene\n\n    const scenes = this.parseScenes(desc, nodes);\n    const scene = scenes[desc.scene];\n    return {\n      json: desc,\n      buffers,\n      bufferViews,\n      meshes,\n      nodes,\n      animations,\n      scenes,\n      scene\n    };\n  } // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n\n\n  static resolveURI(uri, dir) {\n    // Invalid URI\n    if (typeof uri !== 'string' || uri === '') return ''; // Host Relative URI\n\n    if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n      dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n    } // Absolute URI http://, https://, //\n\n\n    if (/^(https?:)?\\/\\//i.test(uri)) return uri; // Data URI\n\n    if (/^data:.*,.*$/i.test(uri)) return uri; // Blob URI\n\n    if (/^blob:.*$/i.test(uri)) return uri; // Relative URI\n\n    return dir + uri;\n  }\n\n  static async loadBuffers(desc, dir) {\n    return await Promise.all(desc.buffers.map(buffer => {\n      const uri = this.resolveURI(buffer.uri, dir);\n      return fetch(uri).then(res => res.arrayBuffer());\n    }));\n  }\n\n  static parseBufferViews(gl, desc, buffers) {\n    // Clone to leave description pure\n    const bufferViews = desc.bufferViews.map(o => Object.assign({}, o));\n    desc.meshes.forEach(({\n      primitives\n    }) => {\n      primitives.forEach(({\n        attributes,\n        indices\n      }) => {\n        // Flag bufferView as an attribute, so it knows to create a gl buffer\n        for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n\n        if (indices === undefined) return;\n        bufferViews[desc.accessors[indices].bufferView].isAttribute = true; // Make sure indices bufferView have a target property for gl buffer binding\n\n        bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n      });\n    }); // Get componentType of each bufferView from the accessors\n\n    desc.accessors.forEach(({\n      bufferView: i,\n      componentType\n    }) => {\n      bufferViews[i].componentType = componentType;\n    }); // Push each bufferView to the GPU as a separate buffer\n\n    bufferViews.forEach(({\n      buffer: bufferIndex,\n      // required\n      byteOffset = 0,\n      // optional\n      byteLength,\n      // required\n      byteStride,\n      // optional\n      target = gl.ARRAY_BUFFER,\n      // optional, added above for elements\n      name,\n      // optional\n      extensions,\n      // optional\n      extras,\n      // optional\n      componentType,\n      // required, added from accessor above\n      isAttribute\n    }, i) => {\n      const TypeArray = TYPE_ARRAY[componentType];\n      const elementBytes = TypeArray.BYTES_PER_ELEMENT;\n      const data = new TypeArray(buffers[bufferIndex], byteOffset, byteLength / elementBytes);\n      bufferViews[i].data = data; // Create gl buffers for the bufferView, pushing it to the GPU\n\n      if (!isAttribute) return;\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(target, buffer);\n      gl.renderer.state.boundBuffer = buffer;\n      gl.bufferData(target, data, gl.STATIC_DRAW);\n      bufferViews[i].buffer = buffer;\n    });\n    return bufferViews;\n  }\n\n  static parseMeshes(gl, desc, bufferViews) {\n    return desc.meshes.map(({\n      primitives,\n      // required\n      weights,\n      // optional\n      name,\n      // optional\n      extensions,\n      // optional\n      extras // optional\n\n    }) => {\n      return {\n        primitives: this.parsePrimitives(gl, primitives, desc, bufferViews),\n        weights,\n        name\n      };\n    });\n  }\n\n  static parseSkins(gl, desc, bufferViews) {\n    if (!desc.skins) return null;\n    return desc.skins.map(({\n      inverseBindMatrices,\n      // optional\n      skeleton,\n      // optional\n      joints // required\n      // name,\n      // extensions,\n      // extras,\n\n    }) => {\n      return {\n        inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n        skeleton,\n        joints\n      };\n    });\n  }\n\n  static populateSkins(skins, nodes) {\n    if (!skins) return;\n    skins.forEach(skin => {\n      skin.joints = skin.joints.map((i, index) => {\n        const joint = nodes[i];\n        joint.bindInverse = new Mat4_Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n        return joint;\n      });\n      skin.skeleton = nodes[skin.skeleton];\n    });\n  }\n\n  static parsePrimitives(gl, primitives, desc, bufferViews) {\n    return primitives.map(({\n      attributes,\n      // required\n      indices,\n      // optional\n      material,\n      // optional\n      mode = 4,\n      // optional\n      targets,\n      // optional\n      extensions,\n      // optional\n      extras // optional\n\n    }) => {\n      const geometry = new Geometry_Geometry(gl); // Add each attribute found in primitive\n\n      for (let attr in attributes) {\n        geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n      } // Add index attribute if found\n\n\n      if (indices !== undefined) geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews)); // TODO: materials\n\n      const program = new NormalProgram(gl);\n      return {\n        geometry,\n        program,\n        mode\n      };\n    });\n  }\n\n  static parseAccessor(index, desc, bufferViews) {\n    // TODO: init missing bufferView with 0s\n    // TODO: support sparse\n    const {\n      bufferView: bufferViewIndex,\n      // optional\n      byteOffset = 0,\n      // optional\n      componentType,\n      // required\n      normalized = false,\n      // optional\n      count,\n      // required\n      type,\n      // required\n      min,\n      // optional\n      max,\n      // optional\n      sparse // optional\n      // name, // optional\n      // extensions, // optional\n      // extras, // optional\n\n    } = desc.accessors[index];\n    const {\n      data,\n      // attached in parseBufferViews\n      buffer,\n      // replaced to be the actual GL buffer\n      // byteOffset = 0, // applied in parseBufferViews\n      // byteLength, // applied in parseBufferViews\n      byteStride = 0,\n      target // name,\n      // extensions,\n      // extras,\n\n    } = bufferViews[bufferViewIndex];\n    const size = TYPE_SIZE[type]; // Return attribute data\n\n    return {\n      data,\n      // Optional. Used for computing bounds if no min/max\n      size,\n      type: componentType,\n      normalized,\n      buffer,\n      stride: byteStride,\n      offset: byteOffset,\n      count,\n      min,\n      max\n    };\n  }\n\n  static parseNodes(gl, desc, meshes, skins) {\n    const nodes = desc.nodes.map(({\n      camera,\n      // optional\n      children,\n      // optional\n      skin: skinIndex,\n      // optional\n      matrix,\n      // optional\n      mesh: meshIndex,\n      // optional\n      rotation,\n      // optional\n      scale,\n      // optional\n      translation,\n      // optional\n      weights,\n      // optional\n      name,\n      // optional\n      extensions,\n      // optional\n      extras // optional\n\n    }) => {\n      const node = new Transform_Transform();\n      if (name) node.name = name; // Apply transformations\n\n      if (matrix) {\n        node.matrix.copy(matrix);\n        node.decompose();\n      } else {\n        if (rotation) node.quaternion.copy(rotation);\n        if (scale) node.scale.copy(scale);\n        if (translation) node.position.copy(translation);\n      } // add mesh if included\n\n\n      if (meshIndex !== undefined) {\n        meshes[meshIndex].primitives.forEach(({\n          geometry,\n          program,\n          mode\n        }) => {\n          if (typeof skinIndex === 'number') {\n            const skin = new GLTFSkin_GLTFSkin(gl, {\n              skeleton: skins[skinIndex],\n              geometry,\n              program,\n              mode\n            });\n            skin.setParent(node);\n          } else {\n            const mesh = new Mesh_Mesh(gl, {\n              geometry,\n              program,\n              mode\n            });\n            mesh.setParent(node);\n          }\n        });\n      }\n\n      return node;\n    });\n    desc.nodes.forEach(({\n      children = []\n    }, i) => {\n      // Set hierarchy now all nodes created\n      children.forEach(childIndex => {\n        nodes[childIndex].setParent(nodes[i]);\n      });\n    });\n    return nodes;\n  }\n\n  static parseAnimations(gl, desc, nodes, bufferViews) {\n    if (!desc.animations) return null;\n    return desc.animations.map(({\n      channels,\n      // required\n      samplers,\n      // required\n      name // optional\n      // extensions, // optional\n      // extras,  // optional\n\n    }) => {\n      const data = channels.map(({\n        sampler: samplerIndex,\n        // required\n        target // required\n        // extensions, // optional\n        // extras, // optional\n\n      }) => {\n        const {\n          input: inputIndex,\n          // required\n          interpolation = 'LINEAR',\n          output: outputIndex // required\n          // extensions, // optional\n          // extras, // optional\n\n        } = samplers[samplerIndex];\n        const {\n          node: nodeIndex,\n          // optional - TODO: when is it not included?\n          path // required\n          // extensions, // optional\n          // extras, // optional\n\n        } = target;\n        const node = nodes[nodeIndex];\n        const transform = TRANSFORMS[path];\n        const timesAcc = this.parseAccessor(inputIndex, desc, bufferViews);\n        const times = timesAcc.data.slice(timesAcc.offset / 4, timesAcc.offset / 4 + timesAcc.count * timesAcc.size);\n        const valuesAcc = this.parseAccessor(outputIndex, desc, bufferViews);\n        const values = valuesAcc.data.slice(valuesAcc.offset / 4, valuesAcc.offset / 4 + valuesAcc.count * valuesAcc.size);\n        return {\n          node,\n          transform,\n          interpolation,\n          times,\n          values\n        };\n      });\n      return {\n        name,\n        animation: new GLTFAnimation(data)\n      };\n    });\n  }\n\n  static parseScenes(desc, nodes) {\n    return desc.scenes.map(({\n      nodes: nodesIndices = [],\n      name,\n      // optional\n      extensions,\n      extras\n    }) => {\n      return nodesIndices.map(i => nodes[i]);\n    });\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/common/lib/ogl/index.mjs\n// Core\n\n\n\n\n\n\n\n\n\n// Maths\n\n\n\n\n\n\n\n\n\n// Extras\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./graphics/common/lib/phong.js\nconst phong_vertex = `\n  precision highp float;\n\n  attribute vec3 position;\n  attribute vec3 normal;\n  uniform mat4 modelViewMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform mat3 normalMatrix;\n  uniform vec3 cameraPosition;\n\n  varying vec3 vNormal;\n  varying vec3 vPos;\n  varying vec3 vCameraPos;\n\n  void main() {\n    vec4 pos = modelViewMatrix * vec4(position, 1.0);\n    vPos = pos.xyz;\n    vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n    vNormal = normalize(normalMatrix * normal);\n    gl_Position = projectionMatrix * pos;\n  }\n`;\nconst phong_fragment = `\n  precision highp float;\n\n  #define MAX_LIGHT_COUNT 16\n  uniform mat4 viewMatrix;\n\n  uniform vec3 ambientLight;\n  uniform vec3 directionalLightDirection[MAX_LIGHT_COUNT];\n  uniform vec3 directionalLightColor[MAX_LIGHT_COUNT];\n  uniform vec3 pointLightColor[MAX_LIGHT_COUNT];\n  uniform vec3 pointLightPosition[MAX_LIGHT_COUNT];\n  uniform vec3 pointLightDecay[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightColor[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightDirection[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightPosition[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightDecay[MAX_LIGHT_COUNT];\n  uniform float spotLightAngle[MAX_LIGHT_COUNT];\n\n  uniform vec3 materialReflection;\n  uniform float shininess;\n  uniform float specularFactor;\n\n  varying vec3 vNormal;\n  varying vec3 vPos;\n  varying vec3 vCameraPos;\n\n  float getSpecular(vec3 dir, vec3 normal, vec3 eye) {\n    vec3 reflectionLight = reflect(-dir, normal);\n    float eyeCos = max(dot(eye, reflectionLight), 0.0);\n    return specularFactor *  pow(eyeCos, shininess);\n  }\n\n  vec4 phongReflection(vec3 pos, vec3 normal, vec3 eye) {\n    float specular = 0.0;\n    vec3 diffuse = vec3(0);\n    \n    // 处理平行光\n    for(int i = 0; i < MAX_LIGHT_COUNT; i++) {\n      vec3 dir = directionalLightDirection[i];\n      if(dir.x == 0.0 && dir.y == 0.0 && dir.z == 0.0) continue;\n      vec4 d = viewMatrix * vec4(dir, 0.0);\n      dir = normalize(-d.xyz);\n      float cos = max(dot(dir, normal), 0.0);\n      diffuse += cos * directionalLightColor[i];\n      specular += getSpecular(dir, normal, eye);\n    }\n\n    // 处理点光源\n    for(int i = 0; i < MAX_LIGHT_COUNT; i++) {\n      vec3 decay = pointLightDecay[i];\n      if(decay.x == 0.0 && decay.y == 0.0 && decay.z == 0.0) continue;\n      vec3 dir = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n      float dis = length(dir);\n      dir = normalize(dir);\n      float cos = max(dot(dir, normal), 0.0);\n      float d = min(1.0, 1.0 / (decay.x * pow(dis, 2.0) + decay.y * dis + decay.z));\n      diffuse += d * cos * pointLightColor[i];\n      specular += getSpecular(dir, normal, eye);\n    }\n\n    // 处理聚光灯\n    for(int i = 0; i < MAX_LIGHT_COUNT; i++) {\n      vec3 decay = spotLightDecay[i];\n      if(decay.x == 0.0 && decay.y == 0.0 && decay.z == 0.0) continue;\n\n      vec3 dir = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n      float dis = length(dir);\n      dir = normalize(dir);\n\n      // 聚光灯的朝向\n      vec3 spotDir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n      // 通过余弦值判断夹角范围\n      float ang = cos(spotLightAngle[i]);\n      float r = step(ang, dot(dir, normalize(-spotDir)));\n\n      float cos = max(dot(dir, normal), 0.0);\n      float d = min(1.0, 1.0 / (decay.x * pow(dis, 2.0) + decay.y * dis + decay.z));\n      diffuse += r * d * cos * spotLightColor[i];\n      specular += r * getSpecular(dir, normal, eye);\n    }\n\n    return vec4(diffuse, specular);\n  }\n\n  void main() {\n    vec3 eyeDirection = normalize(vCameraPos - vPos);\n    vec4 phong = phongReflection(vPos, vNormal, eyeDirection);\n\n    // 合成颜色\n    gl_FragColor.rgb = phong.w + (phong.xyz + ambientLight) * materialReflection;\n    gl_FragColor.a = 1.0;\n  }\n`;\nclass Phong {\n  constructor(ambientLight = [0.5, 0.5, 0.5]) {\n    this.ambientLight = ambientLight;\n    this.directionalLights = new Set();\n    this.pointLights = new Set();\n    this.spotLights = new Set();\n  }\n\n  addLight(light) {\n    const {\n      position,\n      direction,\n      color,\n      decay,\n      angle\n    } = light;\n    if (!position && !direction) throw new TypeError('invalid light');\n    light.color = color || [1, 1, 1];\n    if (!position) this.directionalLights.add(light);else {\n      light.decay = decay || [0, 0, 1];\n\n      if (!angle) {\n        this.pointLights.add(light);\n      } else {\n        this.spotLights.add(light);\n      }\n    }\n  }\n\n  removeLight(light) {\n    if (this.directionalLights.has(light)) this.directionalLights.delete(light);else if (this.pointLights.has(light)) this.pointLights.delete(light);else if (this.spotLights.has(light)) this.spotLights.delete(light);\n  }\n\n  get uniforms() {\n    const MAX_LIGHT_COUNT = 16; // 最多每种光源设置16个\n\n    this._lightData = this._lightData || {};\n    const lightData = this._lightData;\n    lightData.directionalLightDirection = lightData.directionalLightDirection || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.directionalLightColor = lightData.directionalLightColor || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.pointLightPosition = lightData.pointLightPosition || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.pointLightColor = lightData.pointLightColor || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.pointLightDecay = lightData.pointLightDecay || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.spotLightDirection = lightData.spotLightDirection || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.spotLightPosition = lightData.spotLightPosition || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.spotLightColor = lightData.spotLightColor || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.spotLightDecay = lightData.spotLightDecay || {\n      value: new Float32Array(MAX_LIGHT_COUNT * 3)\n    };\n    lightData.spotLightAngle = lightData.spotLightAngle || {\n      value: new Float32Array(MAX_LIGHT_COUNT)\n    };\n    [...this.directionalLights].forEach((light, idx) => {\n      lightData.directionalLightDirection.value.set(light.direction, idx * 3);\n      lightData.directionalLightColor.value.set(light.color, idx * 3);\n    });\n    [...this.pointLights].forEach((light, idx) => {\n      lightData.pointLightPosition.value.set(light.position, idx * 3);\n      lightData.pointLightColor.value.set(light.color, idx * 3);\n      lightData.pointLightDecay.value.set(light.decay, idx * 3);\n    });\n    [...this.spotLights].forEach((light, idx) => {\n      lightData.spotLightPosition.value.set(light.position, idx * 3);\n      lightData.spotLightColor.value.set(light.color, idx * 3);\n      lightData.spotLightDecay.value.set(light.decay, idx * 3);\n      lightData.spotLightDirection.value.set(light.direction, idx * 3);\n      lightData.spotLightAngle.value[idx] = light.angle;\n    });\n    return {\n      ambientLight: {\n        value: this.ambientLight\n      },\n      ...lightData\n    };\n  }\n\n}\nclass Material {\n  constructor(reflection, specularFactor = 0, shininess = 50) {\n    this.reflection = reflection;\n    this.specularFactor = specularFactor;\n    this.shininess = shininess;\n  }\n\n  get uniforms() {\n    return {\n      materialReflection: {\n        value: this.reflection\n      },\n      specularFactor: {\n        value: this.specularFactor\n      },\n      shininess: {\n        value: this.shininess\n      }\n    };\n  }\n\n}\n// CONCATENATED MODULE: ./graphics/normal-maps/cube/cube.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vertex\", function() { return cube_vertex; });\n\n\nconst cube_vertex = `#version 300 es\n  precision highp float;\n\n  in vec3 position;\n  in vec3 normal;\n  in vec2 uv;\n  in vec3 tang;\n  in vec3 bitang;\n\n  uniform mat4 modelMatrix;\n  uniform mat4 modelViewMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform mat3 normalMatrix;\n  uniform vec3 cameraPosition;\n\n  out vec3 vNormal;\n  out vec3 vPos;\n  out vec2 vUv;\n  out vec3 vCameraPos;\n  out mat3 vTBN;\n\n  void main() {\n    vec4 pos = modelViewMatrix * vec4(position, 1.0);\n    vPos = pos.xyz;\n    vUv = uv;\n    vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n    vNormal = normalize(normalMatrix * normal);\n\n    vec3 N = vNormal;\n    vec3 T = normalize(normalMatrix * tang);\n    vec3 B = normalize(normalMatrix * bitang);\n\n    vTBN = mat3(T, B, N);\n    \n    gl_Position = projectionMatrix * pos;\n  }\n`;\nconst cube_fragment = `#version 300 es\n  precision highp float;\n\n  #define MAX_LIGHT_COUNT 16\n  uniform mat4 viewMatrix;\n\n  uniform vec3 ambientLight;\n  uniform vec3 directionalLightDirection[MAX_LIGHT_COUNT];\n  uniform vec3 directionalLightColor[MAX_LIGHT_COUNT];\n  uniform vec3 pointLightColor[MAX_LIGHT_COUNT];\n  uniform vec3 pointLightPosition[MAX_LIGHT_COUNT];\n  uniform vec3 pointLightDecay[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightColor[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightDirection[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightPosition[MAX_LIGHT_COUNT];\n  uniform vec3 spotLightDecay[MAX_LIGHT_COUNT];\n  uniform float spotLightAngle[MAX_LIGHT_COUNT];\n\n  uniform vec3 materialReflection;\n  uniform float shininess;\n  uniform float specularFactor;\n\n  uniform sampler2D tNormal;\n\n  in vec3 vNormal;\n  in vec3 vPos;\n  in vec2 vUv;\n  in vec3 vCameraPos;\n  in mat3 vTBN;\n\n  out vec4 FragColor;\n\n  float getSpecular(vec3 dir, vec3 normal, vec3 eye) {\n    vec3 reflectionLight = reflect(-dir, normal);\n    float eyeCos = max(dot(eye, reflectionLight), 0.0);\n    return specularFactor *  pow(eyeCos, shininess);\n  }\n\n  vec4 phongReflection(vec3 pos, vec3 normal, vec3 eye) {\n    float specular = 0.0;\n    vec3 diffuse = vec3(0);\n    \n    // 处理平行光\n    for(int i = 0; i < MAX_LIGHT_COUNT; i++) {\n      vec3 dir = directionalLightDirection[i];\n      if(dir.x == 0.0 && dir.y == 0.0 && dir.z == 0.0) continue;\n      vec4 d = viewMatrix * vec4(dir, 0.0);\n      dir = normalize(-d.xyz);\n      float cos = max(dot(dir, normal), 0.0);\n      diffuse += cos * directionalLightColor[i];\n      specular += getSpecular(dir, normal, eye);\n    }\n\n    // 处理点光源\n    for(int i = 0; i < MAX_LIGHT_COUNT; i++) {\n      vec3 decay = pointLightDecay[i];\n      if(decay.x == 0.0 && decay.y == 0.0 && decay.z == 0.0) continue;\n      vec3 dir = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n      float dis = length(dir);\n      dir = normalize(dir);\n      float cos = max(dot(dir, normal), 0.0);\n      float d = min(1.0, 1.0 / (decay.x * pow(dis, 2.0) + decay.y * dis + decay.z));\n      diffuse += d * cos * pointLightColor[i];\n      specular += getSpecular(dir, normal, eye);\n    }\n\n    // 处理聚光灯\n    for(int i = 0; i < MAX_LIGHT_COUNT; i++) {\n      vec3 decay = spotLightDecay[i];\n      if(decay.x == 0.0 && decay.y == 0.0 && decay.z == 0.0) continue;\n\n      vec3 dir = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n      float dis = length(dir);\n      dir = normalize(dir);\n\n      // 聚光灯的朝向\n      vec3 spotDir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n      // 通过余弦值判断夹角范围\n      float ang = cos(spotLightAngle[i]);\n      float r = step(ang, dot(dir, normalize(-spotDir)));\n\n      float cos = max(dot(dir, normal), 0.0);\n      float d = min(1.0, 1.0 / (decay.x * pow(dis, 2.0) + decay.y * dis + decay.z));\n      diffuse += r * d * cos * spotLightColor[i];\n      specular += r * getSpecular(dir, normal, eye);\n    }\n\n    return vec4(diffuse, specular);\n  }\n\n  // vec3 getNormal() {\n  //   vec3 n = texture(tNormal, vUv).rgb * 2.0 - 1.0;\n  //   return normalize(vTBN * n);\n  // }\n\n  vec3 getNormal() {\n    vec3 pos_dx = dFdx(vPos.xyz);\n    vec3 pos_dy = dFdy(vPos.xyz);\n    vec2 tex_dx = dFdx(vUv);\n    vec2 tex_dy = dFdy(vUv);\n\n    vec3 t = normalize(pos_dx * tex_dy.t - pos_dy * tex_dx.t);\n    vec3 b = normalize(-pos_dx * tex_dy.s + pos_dy * tex_dx.s);\n    mat3 tbn = mat3(t, b, normalize(vNormal));\n\n    vec3 n = texture(tNormal, vUv).rgb * 2.0 - 1.0;\n    return normalize(tbn * n);\n  }\n\n  void main() {\n    vec3 eyeDirection = normalize(vCameraPos - vPos);\n    vec3 normal = getNormal();\n    vec4 phong = phongReflection(vPos, normal, eyeDirection);\n\n    // 合成颜色\n    FragColor.rgb = phong.w + (phong.xyz + ambientLight) * materialReflection;\n    FragColor.a = 1.0;\n  }\n`;\nconst canvas = document.querySelector('canvas');\nconst renderer = new Renderer({\n  canvas,\n  width: 512,\n  height: 512,\n  antialias: true,\n  alpha: true\n});\nconst cube_gl = renderer.gl;\ncube_gl.clearColor(1, 1, 1, 1);\nconst cube_camera = new Camera_Camera(cube_gl, {\n  fov: 35\n});\ncube_camera.position.set(2, 2, 2);\ncube_camera.lookAt([0, 0, 0]);\nconst scene = new Transform_Transform();\nconst phong = new Phong();\nphong.addLight({\n  // color: [1, 0.5, 0.5],\n  direction: [0, -3, -3]\n});\nphong.addLight({\n  // color: [1, 0.5, 1],\n  direction: [0, 3, 3]\n});\nconst matrial = new Material(new Color_Color('#808080'));\n\nfunction loadTexture(src) {\n  const texture = new Texture(cube_gl);\n  return new Promise(resolve => {\n    const img = new Image();\n\n    img.onload = () => {\n      texture.image = img;\n      resolve(texture);\n    };\n\n    img.src = src;\n  });\n}\n\nfunction createTB(geometry) {\n  const {\n    position,\n    index,\n    uv\n  } = geometry.attributes;\n  if (!uv) throw new Error('NO uv.');\n\n  function getTBNTriangle(p1, p2, p3, uv1, uv2, uv3) {\n    const edge1 = new Vec3_Vec3().sub(p2, p1);\n    const edge2 = new Vec3_Vec3().sub(p3, p1);\n    const deltaUV1 = new Vec2_Vec2().sub(uv2, uv1);\n    const deltaUV2 = new Vec2_Vec2().sub(uv3, uv1);\n    const tang = new Vec3_Vec3();\n    const bitang = new Vec3_Vec3();\n    const f = 1.0 / (deltaUV1.x * deltaUV2.y - deltaUV2.x * deltaUV1.y);\n    tang.x = f * (deltaUV2.y * edge1.x - deltaUV1.y * edge2.x);\n    tang.y = f * (deltaUV2.y * edge1.y - deltaUV1.y * edge2.y);\n    tang.z = f * (deltaUV2.y * edge1.z - deltaUV1.y * edge2.z);\n    tang.normalize();\n    bitang.x = f * (-deltaUV2.x * edge1.x + deltaUV1.x * edge2.x);\n    bitang.y = f * (-deltaUV2.x * edge1.y + deltaUV1.x * edge2.y);\n    bitang.z = f * (-deltaUV2.x * edge1.z + deltaUV1.x * edge2.z);\n    bitang.normalize();\n    return {\n      tang,\n      bitang\n    };\n  }\n\n  const size = position.size;\n  if (size < 3) throw new Error('Error dimension.');\n  const len = position.data.length / size;\n  const tang = new Float32Array(len * 3);\n  const bitang = new Float32Array(len * 3);\n\n  for (let i = 0; i < index.data.length; i += 3) {\n    const i1 = index.data[i];\n    const i2 = index.data[i + 1];\n    const i3 = index.data[i + 2];\n    const p1 = [position.data[i1 * size], position.data[i1 * size + 1], position.data[i1 * size + 2]];\n    const p2 = [position.data[i2 * size], position.data[i2 * size + 1], position.data[i2 * size + 2]];\n    const p3 = [position.data[i3 * size], position.data[i3 * size + 1], position.data[i3 * size + 2]];\n    const u1 = [uv.data[i1 * 2], uv.data[i1 * 2 + 1]];\n    const u2 = [uv.data[i2 * 2], uv.data[i2 * 2 + 1]];\n    const u3 = [uv.data[i3 * 2], uv.data[i3 * 2 + 1]];\n    const {\n      tang: t,\n      bitang: b\n    } = getTBNTriangle(p1, p2, p3, u1, u2, u3);\n    tang.set(t, i1 * 3);\n    tang.set(t, i2 * 3);\n    tang.set(t, i3 * 3);\n    bitang.set(b, i1 * 3);\n    bitang.set(b, i2 * 3);\n    bitang.set(b, i3 * 3);\n  }\n\n  geometry.addAttribute('tang', {\n    data: tang,\n    size: 3\n  });\n  geometry.addAttribute('bitang', {\n    data: bitang,\n    size: 3\n  });\n  return geometry;\n}\n\n(async function () {\n  const normalMap = await loadTexture('../../assets/normal_map.png');\n  const program = new Program(cube_gl, {\n    vertex: cube_vertex,\n    fragment: cube_fragment,\n    uniforms: { ...phong.uniforms,\n      ...matrial.uniforms,\n      tNormal: {\n        value: normalMap\n      }\n    }\n  });\n  const geometry = new Box_Box(cube_gl);\n  createTB(geometry);\n  const cube = new Mesh_Mesh(cube_gl, {\n    geometry,\n    program\n  });\n  cube.setParent(scene);\n  cube.rotation.x = -Math.PI / 2; // renderer.render({scene, camera});\n\n  const controls = new Orbit(cube_camera);\n  requestAnimationFrame(update);\n\n  function update() {\n    requestAnimationFrame(update);\n    controls.update();\n    renderer.render({\n      scene,\n      camera: cube_camera\n    });\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./graphics/normal-maps/cube/cube.js\n")}});